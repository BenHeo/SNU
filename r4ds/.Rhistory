source('C:/Users/renz/Desktop/SNU 4차 산업혁명 아카데미/r4ds/r4ds_transformation.R', echo=TRUE)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
head(flights)
# filter(), arrange(), select(), mutate(), summarise(), group_by()
filter(flights, month == 1, day == 1)
# dplyr package
# filter(), arrange(), select(), mutate(), summarise(), group_by()
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
near(sqrt(2)^2 == 2)
near(sqrt(2)^2, 2)
nov_dec <- filter(flights, month %in% c(11,12))
dfna <- tibble(x = c(1,NA,3))
filter(dfna, x>1)
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
arrange(dfna, x)
arrange(dfna, x); arrange(dfna, desc(x))
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
# select has many sub functions-----starts_with("abc"), ends_with("xyz"), contains("ijk"), matches("(.)\\1"), num_range("x", 1:3)
# select also has rename function, but it is recommended to use it separately like rename(flights, tail_num = tailnum)
select(flights, time_hour, air_time, everything())
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance/air_time * 60
)
View()
View(flights_sml)
# View(flights_sml) # if you want to see all variables it is better than seeing console
transmute(flights_sml,
gain = dep_delay - arr_delay,
speed = distance/air_time* 60,
gain_per_hour = gain/hours
)
# View(flights_sml) # if you want to see all variables it is better than seeing console
transmute(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain/hours
)
x <- 1:10
x <- 1:10; x
lag(x)
lead(x)
select(flights, dep_time, sched_dep_time)
select(flights, dep_time, sched_dep_time) %>%
filter(dep_time > 600)
select(flights, dep_time, sched_dep_time) %>%
filter(dep_time <= 602)
select(flights, dep_time, sched_dep_time) %>%
filter(dep_time <= 602, dep_time > 550)
select(flights, dep_time, sched_dep_time) %>%
filter(dep_time <= 602, dep_time > 555)
select(flights, dep_time, sched_dep_time) %>%
filter(dep_time <= 602, dep_time > 558)
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100)
?Date
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = paste(dep_hour,":", dep_min),
sched = paste(sched_hour, ":", sched_min))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste(dep_hour,":", dep_min)),
sched = as.Date(paste(sched_hour, ":", sched_min)))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste(dep_hour,":", dep_min), "%h%m"),
sched = as.Date(paste(sched_hour, ":", sched_min), "%h%m"))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste(dep_hour+":"+ dep_min), "%h%m"),
sched = as.Date(paste(sched_hour, ":", sched_min), "%h%m"))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste0(dep_hour,":", dep_min), "%h%m"),
sched = as.Date(paste0(sched_hour, ":", sched_min), "%h%m"))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste0(dep_hour,":", dep_min), "%h:%m"),
sched = as.Date(paste0(sched_hour, ":", sched_min), "%h:%m"))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.Date(paste0(dep_hour,":", dep_min), "%H:%M"),
sched = as.Date(paste0(sched_hour, ":", sched_min), "%H:%M"))
select(flights, dep_time, sched_dep_time) %>%
transmute(dep_hour = dep_time %/% 100,
dep_min = dep_time %% 100,
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100) %>%
transmute(dep = as.POSIXct(paste0(dep_hour,":", dep_min), "%H:%M"),
sched = as.Date(paste0(sched_hour, ":", sched_min), "%H:%M"))
summarise(flights, delay = mean(dep_delay, na.rm = T))
flights %>%
group_by(flights, year, month, day) %>%
summarise(delay = mean(dep_delay), na.rm=T)
flights %>%
group_by(flights, year, month, day) %>%
summarise(delay = mean(dep_delay, na.rm=T))
flights %>%
group_by(year, month, day) %>%
summarise(delay = mean(dep_delay, na.rm=T))
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = T),
delay = mean(arr_delay, na.rm = T)
) %>%
filter(count > 20, dest != "HNL")
delays
ggplot(delays, aes(dist, delay)) + geom_point(aes(size = count), alpha = 1/3) + geom_smooth(se=FALSE)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
n = n(),
delay = mean(arr_delay, na.rm = T)
)
ggplot(delays, aes(n, delay)) + geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(aes(n,delay)) + geom_point(alpha = 1/10)
daily <- group_by(flights, year, month, day)
(per_day   <- summarise(daily, flights = n()))
(per_month <- summarise(per_day, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
(per_year  <- summarise(per_month, flights = sum(flights)))
daily %>%
ungroup() %>%             # no longer grouped by date
summarise(flights = n())  # all flights
daily
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 10)
filter(flights_sml,rank(desc(arr_delay)) < 10)
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_dela
flights_sml %>%
group_by(year, month, day)
flights_sml %>%
group_by(year, month, day)
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 10)
vv <- flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 10)
View(vv)
popular_dests
popular_dests <- flights %>%
group_by(dest) %>%
filter(n() > 365)
popular_dests
popular_dests %>%
filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
library(tidyverse)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
count(cut)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
diamonds %>%
filter(carat < 3) %>%
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
diamonds %>%
filter(carat < 3) %>%
ggplot(mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
# If you wish to overlay multiple histograms in the same plot, I recommend using geom_freqpoly()
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
# graph can be different by how we let them draw
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
# If you wish to overlay multiple histograms in the same plot, I recommend using geom_freqpoly()
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.25)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
?coord_cartesian
unusual
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
select(price, x, y, z) %>%
arrange(y)
unusual
ggplot(diamonds)+geom_histogram(aes(price))
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 1)
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 2)
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 5)
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 100)
ggplot(diamonds)+geom_histogram(aes(price))
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 1000)
ggplot(diamonds)+geom_histogram(aes(price), binwidth = 100)
ggplot(diamonds %>%
filter(price < 2000))+geom_histogram(aes(price), binwidth = 100)
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point(na.rm = TRUE)
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point(na.rm = TRUE)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
ggplot(flights, aes(dep_time)) + geom_bar()
ggplot(nycflights13::flights, aes(dep_time)) + geom_bar()
ggplot(nycflights13::flights, aes(dep_time)) + geom_histogram()
ggplot(nycflights13::flights, aes(dep_time)) + geom_bar()
ggplot(nycflights13::flights, aes(dep_time)) + geom_histogram()
na.rm = TRUE
ggplot(nycflights13::flights, aes(dep_time)) + geom_bar(na.rm = TRUE)
ggplot(nycflights13::flights, aes(dep_time)) + geom_bar()
ggplot(nycflights13::flights, aes(dep_time)) + geom_histogram()
ggplot(nycflights13::flights, aes(dep_time)) + geom_histogram(na.rm = TRUE)
ggplot(nycflights13::flights, aes(dep_time)) + geom_histogram()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
install.packages("lvplot")
library(lvplot)
library(lvplot)
ggplot(data = mpg) +
geom_lv(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_violin(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
# To visualise the covariation between categorical variables
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%  # another way and more common way
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%  # another way and more common way
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = 1 / 100)
install.packages("hexbin")
library(hexbin)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
#
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
