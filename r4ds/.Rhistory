library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
# french month reading
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_integer(),
y = col_character()
)
)
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_character()
)
)
tail(challenge)
head(challenge)
# y is date in tail
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
tail(challenge)
head(challenge)
# strategy 2 for fixing type problem
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
challeng2
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character()))
df <- tribble(
~x,  ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
# Note the column types
type_convert(df)
source('C:/Users/renz/Desktop/SNU/r4ds/r4ds_relationalData.R', echo=TRUE)
head(airlines)
head(airports)
head(planes)
head(weather)
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = carrier)
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
# inner join
x %>%
inner_join(y, by = "key")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
2, "x3",
3, "x4"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
2, "y3",
3, "y4"
)
left_join(x, y, by = "key")
# join by multiple keys
flights2 %>%
left_join(airports, c("dest" = "faa"))
top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10)
flights %>%
filter(dest %in% top_dest$dest)
# this is same as...
flights %>%
semi_join(top_dest)
top_dest
count(flights$dest)
count(flights$dest, sort=TRUE)
flights %>%
count(dest)
flights %>%
count(dest, sort=TRUE)
?par
df1 <- tribble(
~x, ~y,
1,  1,
2,  1
)
df2 <- tribble(
~x, ~y,
1,  1,
1,  2
)
intersect(df1, df2)
union(df1, df2)
setdiff(df1, df2)
setdiff(df2, df1)
library(stringr)
library(tidyverse)
# length of strings
str_length(c("a", "R for data science", NA))
# non-english characters
(x <- "\u00b5")
x <- c("\"", "\\")
writeLines(x)
# combine strings
str_c("x", "y")
str_c("x", "y", sep = ",")
str_c("x", "y", sep = ", ")
# replace NA
x <- c("abc", NA)
str_c("|-", x, "-|")
str_replace_na(x)
str_c("|-", re_x, "-|")
re_x <- str_replace_na(x) # replace NA with "NA"
str_c("|-", re_x, "-|")
# fun
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c("Good", time_of_day, name,
if (birthday) "and Happy Birthday!")
str_c("Good ", time_of_day, " ", name,
if (birthday) "and Happy Birthday!")
birthday <- TRUE
str_c("Good ", time_of_day, " ", name,
if (birthday) "and Happy Birthday!")
str_c("Good ", time_of_day, " ", name,
if (birthday) " and Happy Birthday!")
# str_sub(x, start, end)
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
str_sub(x, -3, -1)
# it will just return as much as possible
str_sub("a", 1, 10)
str_sub(x, 1, 1) <- str_to_lower(str_sub(x,1,1)); x
# locale
str_to_upper(c("i", "ı"))
str_to_upper(c("i", "ı"), locale = "tr")
x <- c("apple", "eggplant", "banana")
str_sort(x, locale = "en")  # English
str_sort(x, locale = "haw") # Hawaiian
str_order(x, locale = "en")
strOrd <- str_order(x, locale = "en") # return order
x[strOrd]
str_c("x", "y", sep = ", ") # sep and collapse work differently
str_c("x", "y", sep = ", ", collapse = "!!") # sep and collapse work differently
## str_  Series
# length of strings
str_length(c("a", "R for data science", NA))
## regulex
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_view(x, ".a.")
str_view(c("abc", "a.c", "bef"), "a\\.c")
x <- "a\\b"
str_view(x, "\\\\")
# anchors
# ^ to match the start of the string.
# $ to match the end of the string.
x <- c("apple", "banana", "pear")
str_view(x, "^a")
str_view(x, "a$")
stringr::words
stringr::words %>%
str_match("^yx$")
stringr::words %>%
str_view("^yx$")
stringr::words %>%
str_view("^y") %>%
str_view("x$")
v = "feaoihfi$^$fe"
writeLines(v)
str_view(v, "\\$\\^\\$")
stringr::words %>%
str_view("^y", match = TRUE) %>%
str_view("x$")
stringr::words %>%
str_view("^y", match = TRUE) %>%
str_view("x$", match = TRUE)
stringr::words %>%
str_view("^y", match = TRUE)
stringr::words %>%
str_view("x$", match = TRUE)
words %>%
str_view("x$", match = TRUE)
words %>%
str_view("^y", match = TRUE)
words %>%
str_view("^y")
words %>%
str_view("^y", match = TRUE)
words %>%
str_view("...", match = TRUE)
words %>%
str_view("^...$", match = TRUE)
wordss %>%
str_view(".......", match = TRUE)
words %>%
str_view(".......", match = TRUE)
# \d: matches any digit.
# \s: matches any whitespace (e.g. space, tab, newline).
# [abc]: matches a, b, or c.
# [^abc]: matches anything except a, b, or c.
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
str_view(c("abc", "a.c", "a*c", "a c"), ".[*]c")
str_view(c("abc", "a.c", "a*c", "a c"), "a[ ]")
str_view(c("abc", "deaf", "soap", "cars"), "abc|d..f")
str_view(c("grey", "gray"), "gr(e|a)y")
# ?: 0 or 1
# +: 1 or more
# *: 0 or more
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
str_view(x, "CC+")
str_view(x, "CC*")
str_view(x, "C[LX]+")
# {n}: exactly n
# {n,}: n or more
# {,m}: at most m
# {n,m}: between n and m
str_view(x, "C{2}")
str_view(x, "C{2,}")
str_view(x, "C{2,3")
str_view(x, "C{2,3}")
str_view(x, "C{2,3}?")
# ?: 0 or 1
# +: 1 or more
# *: 0 or more
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
str_view(x, "CC+")
str_view(x, 'C[LX]+?')
str_view(x, 'C[LX]?')
str_view(x, 'C[LX]+')
str_view(x, 'C[IV]+?')
str_view(x, 'C[IV]+')
str_view(x, 'C[IV]')
str_view(x, 'C[IV]?')
str_view(x, 'C[IV]+?')
str_view(fruit, "(..)\\1", match = TRUE)
str_view(fruit, "(..)\\2", match = TRUE)
str_view(fruit, "(..)\\1", match = TRUE)
str_detect(x, "e")
# str_detect: TRUE or FALSE
x <- c("apple", "banana", "pear")
str_detect(x, "e")
sum(str_detect(x, "^t"))
sum(str_detect(words, "^t"))
mean(str_detect(words, "[aeiou]$"))
x <- c("apple", "banana", "pear")
str_count(x, "a")
# On average, how many vowels per word?
mean(str_count(words, "[aeiou]"))
df %>%
mutate(
vowels = str_count(word, "[aeiou]"),
consonants = str_count(word, "[^aeiou]")
)
df
library(tidyverse)
df %>%
mutate(
vowels = str_count(word, "[aeiou]"),
consonants = str_count(word, "[^aeiou]")
)
word %>%
mutate(
vowels = str_count("[aeiou]"),
consonants = str_count("[^aeiou]")
)
head(word)
word
df %>%
mutate(
vowels = str_count(words, "[aeiou]"),
consonants = str_count(words, "[^aeiou]")
)
words %>%
mutate(
vowels = str_count("[aeiou]"),
consonants = str_count("[^aeiou]")
)
words
df <- data.frame(word = words)
head(df)
df %>%
mutate(
vowels = str_count(words, "[aeiou]"),
consonants = str_count(words, "[^aeiou]")
)
?seq_along
df %>%
seq_along(word)
df <- tibble(word = words)
df %>%
seq_along(word)
df <- tibble(
word = words,
i = seq_along(word)
)
head(df)
df %>%
mutate(
vowels = str_count(words, "[aeiou]"),
consonants = str_count(words, "[^aeiou]")
)
a_bef = matrix(1000*1000, 1000, 1000)
a_bef[1:10, 1:10]
a_bef = matrix(0, 1000, 1000)
a_bef[1:10, 1:10]
a_bef <- matrix(0, 1000, 1000)
a_bef[1:10, 1:10]
even <- seq(2,1000,2)
even[1:10]
even[-1]
a_bef[even, even] <- 1
a_bef[1:10, 1:10]
my_csum(1:5)
# 2
my_csum <- function(vec){
re_vec <- vec
re_vec[1:length(re_vec)] <- 0
my_cum <- 0
for (i in 1:length(vec)){
my_cum <- my_cum + vec[i]
re_vec[i] <- my_cum
}
return(re_vec)
}
my_csum(1:5)
# 3
set.seed(1)
runif(1000)
ru <- runif(1000)
return(re_vec)
my_cavg <- function(vec){
re_vec <- vec
re_vec[1:length(re_vec)] <- 0
my_cum <- 0
for (i in 1:length(vec)){
my_cum <- my_cum + vec[i]
my_avg <- my_cum/i
re_vec[i] <- my_avg
}
return(re_vec)
}
my_cavg(ru)
re_avg <- my_cavg(ru)
y <- re_avg
x <- 1:1000
y <- re_avg[x]
plot(x, y)
plot(x, y, type = 'l')
df %>%
filter(str_detect(words, "x$"))
df %>%
mutate(
vowels = str_count(words, "[aeiou]"),
consonants = str_count(words, "[^aeiou]")
)
str_count("abababa", "aba")
str_view_all("abababa", "aba")
str_view("abababa", "aba")
y[1:10]
re_avg[1:10]
my_cavg[1:10]
my_cavg(ru)[1:10]
ru[1:10]
# let's use sentences data
length(sentences)
head(sentences)
colors <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(colors, collapse = "|")
color_match
has_color <- str_subset(sentences, color_match)
head(has_color)
?str_subset
fruit <- c("apple", "banana", "pear", "pinapple")
str_subset(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinpple")
str_subset(fruit, "a")
matches <- str_extract(has_colour, colour_match)
head(matches)
matches <- str_extract(has_color, color_match)
head(matches)
more <- sentences[str_count(sentences, color_match) > 1]
str_view_all(more, color_match)
more
str_extract_all(more, colour_match)
str_extract_all(more, color_match)
str_extract_all(more, color_match, simplify = TRUE) # return data.frame
class(str_extract_all(more, color_match, simplify = TRUE)) # return data.frame
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
noun <- "(a|the) ([ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
noun <- "(a|the)([^ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
noun <- "(a|the)([ ]+)"
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
has_noun %>%
str_match(noun)
noun <- "(a|the) ([^ ]+)" # look white space carefully between () and ([])
has_noun <- sentences %>%
str_subset(noun) %>%
head(10)
has_noun %>%
str_extract(noun)
has_noun %>%
str_match(noun) # one
# extract is for tibble
tibble(sentence = sentences) %>%
tidyr::extract(
sentence, c("article", "noun"), "(a|the) ([^ ]+)",
remove = FALSE
)
# extract is for tibble
tibble(sentence = sentences) %>%
tidyr::extract(
sentence, c("article", "noun"), "(a|the) ([^ ]+)",
remove = TRUE
)
# extract is for tibble
tibble(sentence = sentences) %>%
tidyr::extract(
sentence, c("article", "noun"), "(a|the) ([^ ]+)",
remove = FALSE
)
x <- c("apple", "pear", "banana")
str_replace(x, "[aeiou]", "-")
str_replace_all(x, "[aeiou]", "-")
str_replace_all(x, c("1" = "one", "2" = "two", "3" = "three")) # can do like this
x <- c("1 house", "2 cars", "3 people")
str_replace_all(x, c("1" = "one", "2" = "two", "3" = "three")) # can do like this
sentences %>%
str_replace("([^ ]+) ([^ ]+) ([^ ]+)", "\\1 \\3 \\2") %>%  # used backreference
head(5)
sentences %>%
head(5) %>%
str_split(" ")
sentences %>%
head(5) %>%
str_split(" ", simplify = TRUE)
fields <- c("Name: Hadley", "Country: NZ", "Age: 35")
fields %>% str_split(": ", n = 2, simplify = TRUE)
# Instead of splitting up strings by patterns, you can also split up by character, line, sentence and word boundary()s:
x <- "This is a sentence.  This is another sentence."
str_view_all(x, boundary("word"))
str_view(fruit, "nana")
# Is shorthand for
str_view(fruit, regex("nana")) # so same things are returned
str_view(fruit, "nana")
bananas <- c("banana", "Banana", "BANANA")
str_view(bananas, "banana")
str_view(bananas, regex("banana", ignore_case = TRUE))
str_view(bananas, "banana")
str_view(bananas, regex("banana", ignore_case = TRUE))
str_extract_all(more, color_match) # it returns list
str_extract_all(more, color_match, simplify = TRUE) # return matrix
x <- "Line 1\nLine 2\nLine 3"
str_extract_all(x, "^Line")[[1]]
writeLines(x)
str_extract_all(x, regex("^Line", multiline = TRUE))[[1]]
library(tidyverse)
library(stringr)
apropos("replace")
