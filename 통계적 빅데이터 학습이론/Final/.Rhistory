if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/4))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/100))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/20))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/5))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/3))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = TRUE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/3))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = TRUE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/4))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = TRUE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/5))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/5))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/6))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = TRUE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/6))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
poli_party_clust <- bind_cols(poli_party, clust=group_poli)
View(poli_party_clust)
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=20, shrinkage = 0.1, interaction.depth = 1)
# summary(boost.pol)
best.iter = gbm.perf(boost.pol, method="cv")
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=best.iter, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
# postResample(mPred, test_set$ideo_self)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
print(i, "fold completed")
}
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
ntree <- 20
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=ntree, shrinkage = 0.1, interaction.depth = 1)
# summary(boost.pol)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=ntree, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
# postResample(mPred, test_set$ideo_self)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
print(i, "fold completed")
}
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
ntree <- 20
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=ntree, shrinkage = 0.1, interaction.depth = 1)
# summary(boost.pol)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=ntree, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
# postResample(mPred, test_set$ideo_self)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
ntree <- 50
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=ntree, shrinkage = 0.1, interaction.depth = 1)
# summary(boost.pol)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=ntree, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
# postResample(mPred, test_set$ideo_self)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
poliforest <- political %>%
select(k2:k14)
poliforest[poliforest==0] <- -1 # change 0 to 1
poliforest[is.na(poliforest)] <- 0 # change NA to 0
political2 <- political
political2[,9:18] <- poliforest
pol2 <- political2 %>%
select(sex, age1, area:ideo_self)
pol2$ideo_self <- as.factor(pol2$ideo_self)
pol2$area <- as.factor(pol2$area)
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
ntree <- 50
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=ntree,
shrinkage = 0.1, interaction.depth = 1)
# summary(boost.pol)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=ntree, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
# postResample(mPred, test_set$ideo_self)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = TRUE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/4))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
group_poli <- rep(0, 141)
influence_order <- order(diag(as.matrix(poli_rel)), decreasing = FALSE)
j <- 0
for (i in influence_order){
if(group_poli[i] == 0){
j <- j+1
k <- j
} else{
k <- group_poli[i]
}
ith_poli<- poli_rel[i,]
refer <- poli_rel[i,i]
related <- which(ith_poli >= (refer/5))
group_poli[related] <- k
}
ggplot(data.frame(x=group_poli)) + geom_bar(aes(as.factor(x)))
50-80+7.7+35+4.4-40
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
ntree <- 50
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=ntree,
shrinkage = 0.1, interaction.depth = 1)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=ntree, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=20, interaction.depth = 1, cv.folds = 5)
summary(boost.pol)
best.iter = gbm.perf(boost.pol, method="cv")
# predict(boost.pol, newdata = test_set, n.trees = 1000)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=best.iter, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
postResample(mPred, test_set$ideo_self)
sum(mPred == test_set$ideo_self)/nrow(test_set)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
cat(i, "fold completed")
}
ten_tables
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(warning = FALSE)
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=1000, interaction.depth = 1)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=1000, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=1000, interaction.depth = 1)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=1000, .shrinkage=0.01, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
}
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=20, interaction.depth = 1, cv.folds = 5)
summary(boost.pol)
best.iter = gbm.perf(boost.pol, method="cv")
# predict(boost.pol, newdata = test_set, n.trees = 1000)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=best.iter, .shrinkage=0.1, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
postResample(mPred, test_set$ideo_self)
sum(mPred == test_set$ideo_self)/nrow(test_set)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
cat(i, "fold completed")
}
ten_tables
corrected <- sum(diag(ten_tables))
corrected/sum(ten_tables)
fold_point <- c(seq(0, 900, 100), 1054)
ten_tables <- matrix(0, 11, 11)
colnames(ten_tables) <- paste0("pred", 0:10)
rownames(ten_tables) <- paste0("real", 0:10)
ten_tables <- as.table(ten_tables)
for (i in 1:10){
start_point <- fold_point[i]+1
end_point <- fold_point[i+1]
test_idx <- start_point:end_point
test_set <- pol2[test_idx,]
train_set <- pol2[-test_idx,]
boost.pol=gbm(ideo_self~.,data=train_set,
distribution="multinomial",n.trees=500, interaction.depth = 1, cv.folds = 5)
summary(boost.pol)
best.iter = gbm.perf(boost.pol, method="cv")
# predict(boost.pol, newdata = test_set, n.trees = 1000)
fitControl = trainControl(method="cv", number=5, returnResamp = "all")
model2 = train(ideo_self~.,data=train_set, method="gbm",distribution="multinomial",
trControl=fitControl, verbose=F,
tuneGrid=data.frame(.n.trees=best.iter, .shrinkage=0.01, .interaction.depth=1, .n.minobsinnode=1))
mPred = predict(model2, test_set, na.action = na.pass)
postResample(mPred, test_set$ideo_self)
sum(mPred == test_set$ideo_self)/nrow(test_set)
itable <- table(real = test_set$ideo_self, pred = mPred)
ten_tables <- ten_tables + as.table(itable)
cat(i, "fold completed")
}
ten_tables
corrected <- sum(diag(ten_tables))
corrected/sum(ten_tables)
source('C:/Users/asd/Desktop/데이터 사이언스/SNU/자료기반 통계의사결정모델/Final/mobil.R', echo=TRUE)
library(tidyverse)
library(xlsx)
fin4 <- read.xlsx("data4.xlsx", 2, startRow = 2)
head(fin4)
fin4 <- fin4 %>%
select(-NA.)
ggplot(fin4, aes(V2, V3)) + geom_point(aes(color = V1))
ggplot(fin4, aes(V4, V3)) + geom_point(aes(color = V1))
ggplot(fin4, aes(V5, V3)) + geom_point(aes(color = V1))
ggplot(fin4, aes(V6, V3)) + geom_point(aes(color = V1))
