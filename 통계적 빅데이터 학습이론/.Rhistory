# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(360, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
nrow(mpg)
train = sample.int(370, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
head(mpg)
train = sample.int(374, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(379, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(385, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(390, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(393, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
train = sample.int(395, replace = FALSE)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
library(tidyverse)
trainX = trainXy %>%
select(mpg:origin)
is.data.frame(trainX)
is.data.frame(trainXy)
trainX = trainXy %>%
select(mpg)
head(trainXy)
library(ISLR)
library(tidyverse)
# lab 1
mpg <- read.csv("data/data/data/mpg.csv")
mpg <- mpg %>%
mutate(mpg01 = ifelse(mpg > med_mpg, 1, 0))
med_mpg <- median(mpg$mpg)
mpg <- mpg %>%
mutate(mpg01 = ifelse(mpg > med_mpg, 1, 0))
train = which(mpg$year %% 2 == 0)
test = which(mpg$year %% 2 != 0)
trainXy = mpg[train,]
testXy = mpg[test,]
trainX = trainXy %>%
select(mpg)
trainX = trainXy %>%
select(-mpg01)
trainy = trainXy %>%
select(mpg01)
testX = testXy %>%
select(-mpg01)
testy = tesetXy %>%
select(mpg01)
testy = testXy %>%
select(mpg01)
library(MASS)
trainX = trainXy %>%
dplyr::select(-mpg01)
knn.pred = knn(trainX, testX, trainy, k = 1)
??knn
library(ISLR)
n
knn.pred = knn(trainX, testX, trainy, k = 1)
library(class)
knn.pred = knn(trainX, testX, trainy, k = 1)
nrow(trainX)
nrow(trainy)
nrow(testX)
summary(trainy)
testy = testXy %>%
dplyr::select(mpg01) %>%
as.factor
testX = testXy %>%
dplyr::select(-mpg01) %>%
as.factor()
testy = testXy %>%
dplyr::select(mpg01) %>%
as.factor()
knn.pred = knn(trainX, testX, trainy, k = 1)
summary(trainy)
trainX = trainXy %>%
dplyr::select(-mpg01)
trainy = trainXy %>%
dplyr::select(mpg01) %>%
as.factor()
testX = testXy %>%
dplyr::select(-mpg01)
testy = testXy %>%
dplyr::select(mpg01) %>%
as.factor()
knn.pred = knn(trainX, testX, trainy, k = 1)
is.na(train)
sum(is.na(train))
knn.pred = knn(trainX, testX, trainy, k = 3)
head(trainy)
head(trainX)
trainy = as.factor(trainy)
trainy = trainXy %>%
dplyr::select(mpg01)
trainy = as.factor(trainy)
testy = as.factor(testy)
testy = testXy %>%
dplyr::select(mpg01)
testy = as.factor(testy)
knn.pred = knn(trainX, testX, trainy, k = 3)
head(trainy)
trainy = trainXy %>%
dplyr::select(mpg01)
trainyty
head(trainy)
tail(trainy)
is.factor(trainy)
trainy = as.factor(trainy)
is.factor(trainy)
head(trainy)
?as.factor
trainy = trainXy %>%
dplyr::select(mpg01)
trainy = as.factor(as.vector(trainy))
head(trainy)
trainy = trainXy %>%
dplyr::select(mpg01)
trainy = as.factor((trainy$mpg01))
head(trainy)
testy = testXy %>%
dplyr::select(mpg01)
testy = as.factor(testy$mpg01)
knn.pred = knn(trainX, testX, trainy, k = 3)
head(testy)
head(trainX)
head(testX)
trainX = trainXy %>%
dplyr::select(-c(name,mpg01))
head(trainX)
testX = testXy %>%
dplyr::select(-c(name, mpg01))
knn.pred = knn(trainX, testX, trainy, k = 3)
summary(trainX)
is.factor(mpg$horsepower)
mpg$horsepower <- as.numeric(mpg$horsepower)
trainX$horsepower <- as.numeric(trainX$horsepower)
knn.pred = knn(trainX, testX, trainy, k = 3)
is.na(trainX)
sum(is.na(trainX))
sum(is.na(testX))
trainX = trainXy %>%
dplyr::select(weight,displacement,horsepower)
head(trainX)
testy = testXy %>%
dplyr::select(weight,displacement,horsepower)
knn.pred = knn(trainX, testX, trainy, k = 3)
testX = testXy %>%
dplyr::select(weight,displacement,horsepower)
testy = testXy %>%
dplyr::select(mpg01)
knn.pred = knn(trainX, testX, trainy, k = 3)
testy = as.factor(testy$mpg01)
knn.pred = knn(trainX, testX, trainy, k = 3)
)
knn.pred = knn(trainX, testX, trainy, k = 3)
trainX
knn.pred
# lab 1
mpg <- read.csv("data/Auto.csv")
library(tidyverse)
colSums(is.na(mpg)) # no NAs
med_mpg <- median(mpg$mpg)
mpg <- mpg %>%
mutate(mpg01 = ifelse(mpg > med_mpg, 1, 0))
train = which(mpg$year %% 2 == 0)
test = which(mpg$year %% 2 != 0)
trainXy = mpg[train,]
testXy = mpg[test,]
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
library(MASS)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~weight+displacement+horsepower, data = mpg, subset = train) # ???
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~cylinders+weight+displacement+horsepower, data = mpg, subset = train) # ???
train = (mpg$year %% 2 == 0)
test = (mpg$year %% 2 != 0)
# mpg$cylinders = as.numeric(mpg$cylinders)
# train$cylinders = as.factor(train$cylinders)
# train$cylinders = as.factor(train$horsepower)
# train$mpg01 = as.factor(train$mpg01)
lda.fit <- lda(mpg01~cylinders+weight+displacement+horsepower, data = mpg, subset = train) # ???
logistic.fit <- glm(mpg01~cylinders+weight+displacement+horsepower, data = mpg, family = binomial)
logistic.pred <- predict(logistic.fit, type="response")
pred <- ifelse(logistic.pred>0.5, 1, 0)
table(mpg$mpg01, pred)
logistic.fit <- glm(mpg01~cylinders+weight+displacement+horsepower, data = mpg, family = binomial, subset = train)
logistic.pred <- predict(logistic.fit, type="response")
pred <- ifelse(logistic.pred>0.5, 1, 0)
table(mpg$mpg01, pred)
logistic.pred <- predict(logistic.fit, testXy, type="response")
pred <- ifelse(logistic.pred>0.5, 1, 0)
table(mpg$mpg01, pred)
logistic.pred <- predict(logistic.fit, mpg[test,], type="response")
# Lab 2
default <- read.table(read.csv("data/data/default.txt"))
# Lab 2
default <- read.table(read.csv("data/data/data/default.txt"))
# Lab 2
default <- read.table("data/data/data/default.txt")
head(default)
# Lab 2
Default <- read.table("data/data/data/default.txt")
head(Default)
def_glm.fit <- glm(default~income+balance, data = Default, family = binomial)
summary(def_glm.fit)
boot.fn <- function(dat, idx){
my_glm <- glm(default~income+balance, date = dat, family = binomial, subset = idx)
coeff <- coef(my_glm)
return(coeff)
}
library(boot)
boot(Default, 50)
boot(Default, boot.fn, 50)
head(Default)
?boot
boot.fn <- function(dat, idx){
my_glm <- glm(default~income+balance, date = dat, family = binomial, subset = idx)
coeff <- coef(my_glm)
return(coeff)
}
library(boot)
boot(Default, boot.fn, 50)
Default
boot.fn = function(data, index){
return(coef(glm(default ~ income + balance, data = data,
family =binomial, subset = index)))
}
library(boot)
boot(Default, boot.fn, 50)
boot.fn = function(dat, index){
return(coef(glm(default ~ income + balance, data = dat,
family =binomial, subset = index)))
}
library(boot)
boot(Default, boot.fn, 50)
boot.fn = function(dat, indx){
return(coef(glm(default ~ income + balance, data = dat,
family =binomial, subset = indx)))
}
library(boot)
boot(Default, boot.fn, 50)
boot.fn <- function(dat, idx){
my_glm <- glm(default~income+balance, data = dat, family = binomial, subset = idx)
coeff <- coef(my_glm)
return(coeff)
}
library(boot)
boot(Default, boot.fn, 50)
opts_chunk$set(eval=TRUE, cache=TRUE, fig.width=7, fig.height=4)
library(tidyverse)
opts_chunk$set(eval=TRUE, cache=TRUE, fig.width=7, fig.height=4)
library(knitr)
opts_chunk$set(eval=TRUE, cache=TRUE, fig.width=7, fig.height=4)
auto = read.csv("data/Auto.csv", header = T)
head(auto)
auto$horsepower <- as.numeric(auto$horsepower)
head(auto)
library(ISLR)
nrow(auto)
trainIdx = sample(397, 198)
lm.fit <- lm(mpg~horsepower, data = auto, subset=train)
lm.pred <- predict(lm.fit, auto[-train,])
lm.pred
mean((mpg$mpg - lm.pred)^2)
mean((mpg[-train,]$mpg - lm.pred)^2)
library(leaps)
install.packages("leaps")
regfit.full <- regsubsets(Salary~., Hitters)
??regsubsets
library(leaps)
regfit.full <- regsubsets(Salary~., Hitters)
data("Hitters")
data(Hitters)
library(ISLR)
regfit.full <- regsubsets(Salary~., Hitters)
summary(regfit.full)
head(Hitters)
# forward
regfit.full <- regsubsets(Salary~., Hitters, nvmax = 19, method = 'forward')
summary(regfit.full)
reg.summary <- summary(regfit.full)
names(reg.summary)
oldpar <- par()
par(mfrow = c(2,2))
plot(reg.summary$rss)
plot(reg.summary$adjr2)
plot(reg.summary$cp)
plot(reg.summary$bic)
which.max(reg.summary$adjr2)
plot(
reg.summary$adjr2
argmax_adjr2 <- which.max(reg.summary$adjr2)
par(mfrow = c(2,2))
plot(reg.summary$rss)
plot(reg.summary$adjr2)
argmax_adjr2 <- which.max(reg.summary$adjr2)
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2])
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2], col = "red")
?points
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2], col = "red", pch = 24, cex = 5)
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2], col = "red", pch = 22, cex = 5)
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2], col = "red", pch = 12, cex = 5)
points(argmax_adjr2, reg.summary$adjr2[argmax_adjr2], col = "red", pch = 12, cex = 3)
library(glmnet)
install.packages("glmnet")
library(ISLR)
library(glmnet)
Hitters
Hitters <- na.omit(Hitters)
dim(Hitters)
x = model.matrix(Salary~., Hitters)
x
head(Hitters)
y = Hitters$Salary
n = 263
B = 1000
best = matrix(0, B, 20)
best
for (b in (1:B)){
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[,bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = as.vector(coef(lasso.mod))
cat("\t b=")
cat(b)
}
for (b in (1:B)){
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = as.vector(coef(lasso.mod))
cat("\t b=")
cat(b)
}
dim(Hitters)
attach(Hitters)
x = model.matrix(Salary~., Hitters)
x
y = Hitters$Salary
n = 263
B = 1000
best = matrix(0, B, 20)
for (b in (1:B)){
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = as.vector(coef(lasso.mod))
cat("\t b=")
cat(b)
}
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = as.vector(coef(lasso.mod))
lasso.mod
coef(lasso.mod)
best[b,] = (coef(lasso.mod))
cat("\t b=")
cat(b)
for (b in (1:B)){
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = (coef(lasso.mod))
cat("\t b=")
cat(b)
}
grid
blamb
which(grid == blamb)
grid[70]
as.vector(coef(lasso.mod))
best = matrix(0, B, 21)
for (b in (1:B)){
bid = sample(n,n, replace = TRUE)
bx = x[bid,]
by = y[bid]
grid = 10^seq(4, -1, length.out = 100)
cv.out = cv.glmnet(bx, by, alpha = 1, lambda = grid)
blamb = cv.out$lambda.min
lasso.mod = glmnet(bx,by, alpha = 1, lambda = exp(blamb))
best[b,] = as.vector(coef(lasso.mod))
cat("\t b=")
cat(b)
}
best
mu <- apply(best, 2, mean)
mu
se <- apply(best, 2, sd)
se
?sd
tstat <- mu/se
tstat
pvalue <- 2*(1-pnorm(abs(tstat)))
pvalue
select <- (best != 0)
select
stab <- apply(select, 2, sum)/B
stab
numselect <- apply(select, 1, sum)
hist(numselect)
hist(numselect, breaks = 20)
?abline
?lm
?plot
advertising = read.csv('data/Advertising.csv', row.names = NULL)
lm.fit <- lm(sales ~ TV, data = advertising)
summary(lm.fit)
head(Credit)
lm.fit <- lm(Balance~Gender, Credit)
summary(lm.fit)
attach(Credit)
plot(Balance~Income, col = Gender)
lm.fit <- lm(Balance~Income+Gender)
lm.fit$coefficients
mylm <- lm(Balance~., data = Credit)
summary(mylm)
aic.credit <- stepAIC(mylm, direction = "both")
summary(aic.credit)
library(datasets)
library(MASS)
library(ISLR)
advertising = read.csv('data/Advertising.csv', row.names = NULL)
lm.fit <- lm(sales ~ TV, data = advertising)
summary(lm.fit)
head(Credit)
lm.fit <- lm(Balance~Gender, Credit)
summary(lm.fit)
attach(Credit)
plot(Balance~Income, col = Gender)
lm.fit <- lm(Balance~Income+Gender)
lm.fit$coefficients
mylm <- lm(Balance~., data = Credit)
summary(mylm)
aic.credit <- stepAIC(mylm, direction = "both")
summary(aic.credit)
library(pdflatex)
install.packages("latexpdf")
install.packages("lpdfatex")
install.packages("pdflatex")
library(latexpdf)
