movie$star = ifelse(movie$star >= 8, 1, 0)
movie$month = ifelse(movie$month %in% c(5,7,8,12), 1, 0)
movie$month <- as.factor(movie$month)
movie$star <- as.factor(movie$star)
movie$year <- as.factor(movie$year)
# use gsub
ap <- movie %>%
gather(key, value, actor1:actor3) %>%
filter(value != "") %>%
group_by(value) %>%
summarise(actor_power = sum(audience)) %>%
select(value, actor_power)
movie <- movie %>%
left_join(ap, by = c("actor1" = "value"), suffix = c('', '1')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '2')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '3')) %>%
rename(actor_power1 = actor_power) %>%
mutate(actors_value = log((actor_power1 + ifelse(is.na(actor_power2), 0, actor_power2)
+ ifelse(is.na(actor_power3), 0, actor_power3))/
(1 + ifelse(is.na(actor_power2), 0, 1) + ifelse(is.na(actor_power3), 0, 1)))) # 1번 배우에 0.5, 2번 배우에 0.3, 3번 배우에 0.2 비중
# lm.fit <- lm(audience~., data = movie)
# step(lm.fit, direction = "both")
lm.fit <- lm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie)
summary(lm.fit)
lm.pred <- predict(lm.fit)
rmse(movie$audience, lm.pred)
ggplot(bind_cols(real = movie$audience, pred = lm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$audience, res = lm.fit$residuals), aes(real, res)) + geom_point() + geom_smooth()
glm.fit <- glm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+main_actors*actors_value, data = movie, family = "Gamma")
summary(glm.fit)
# step(glm.fit, direction = "both")
glm.pred <- predict(glm.fit, type = "response")
rmse(movie$audience, glm.pred)
head(bind_cols(real = movie$audience, pred = glm.pred))
ggplot(bind_cols(real = movie$audience, pred = glm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
glm.fit <- glm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+main_actors*actors_value, data = movie, family = "poisson")
summary(glm.fit)
# step(glm.fit, direction = "both")
glm.pred <- predict(glm.fit, type = "response")
rmse(movie$audience, glm.pred)
head(bind_cols(real = movie$audience, pred = glm.pred))
ggplot(bind_cols(real = movie$audience, pred = glm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$audience, pred = lm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$audience, res = lm.fit$residuals), aes(real, res)) + geom_point() + geom_smooth()
# lm.fit <- lm(audience~., data = movie)
# step(lm.fit, direction = "both")
lm.fit <- lm(log(audience)~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie)
summary(lm.fit)
lm.pred <- predict(lm.fit)
rmse(movie$audience, lm.pred)
rmse(movie$audience, exp(lm.pred))
ggplot(bind_cols(real = movie$audience, pred = lm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$audience, pred = exp(lm.pred)), aes(x=real, y=pred)) + geom_point() + geom_smooth()
exp(lm.pred)[exp(lm.pred)>3e+07]
movie[1016,]
movie <- read.csv("dat.csv")
head(movie, 2)
summary(movie)
names(movie)
table(movie$name)[table(movie$name) > 1]
rmse <- function(real, pred){
rmse <- sqrt(mean((real-pred)^2))
rmse
}
ggplot(movie) + geom_histogram(aes(audience))
ggplot(movie) + geom_histogram(aes(log(audience)))
ggplot(movie) + geom_histogram(aes(sqrt(log(audience))))
ggplot(movie) + geom_histogram(aes(sqrt(audience)))
ggplot(movie) + geom_bar(aes(year))
taud <- sum(movie$audience)
movie$year <- as.numeric(movie$year)
year_impact <- movie %>%
filter(year != 2018) %>%
group_by(year) %>%
summarise(n = n(),
t_per_year = sum(audience),
standard_aud = t_per_year/n) %>%
select(year, standard_aud) %>%
mutate(mu = mean(standard_aud),
ratio = standard_aud/mu) %>%
select(year, ratio)
year_impact$year <- as.numeric(year_impact$year)
year_impact <- bind_rows(year_impact, data.frame(year = 2018, ratio = 1.15))
ggplot(movie, aes(audience)) + geom_histogram(bins=30)
# overmovie <- movie[movie$audience > 1200000,]
#
# for (i in 1:3){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
#
# overmovie <- movie[movie$audience > 3500000,]
#
# for (i in 1:4){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
movie$month <- as.factor(movie$month)
movie <- movie %>%
mutate(country = as.factor(ifelse(country == "미국", 1, ifelse(country == "한국", 2, 0)))) # 1: 미국, 2: 한국, 3: 기타국
movie$genre <- as.character(movie$genre)
movie = movie[movie$genre != '서부극(웨스턴)' & movie$genre != '공연' & movie$genre != '뮤지컬' & movie$genre != '다큐멘터리',]
ggplot(movie, aes(audience)) + geom_histogram(bins=30)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=month))
# ggplotly(g)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=genre))
# ggplotly(g)
# 장르1 = 가족, 공포(호러), 애니메이션
# 장르2 = SF, 드라마, 멜로/로맨스, 미스터리, 스릴러, 코미디
# 장르3 = 범죄, 사극, 액션, 어드벤쳐, 전쟁, 판타지
movie$genre[movie$genre ==  '가족' | movie$genre ==  '공포(호러)' | movie$genre ==  '애니메이션'] = '장르1'
movie$genre[movie$genre ==  'SF' | movie$genre ==  '드라마' | movie$genre ==  '멜로/로맨스' | movie$genre == '미스터리' |
movie$genre == '스릴러' | movie$genre == '코미디'] = '장르2'
movie$genre[movie$genre ==  '범죄' | movie$genre ==  '사극' | movie$genre ==  '액션' | movie$genre ==  '어드벤처' |
movie$genre ==  '전쟁' | movie$genre ==  '판타지'] = '장르3'
movie$genre <- as.factor(movie$genre)
movie = movie %>% group_by(director) %>% mutate(director_score = log(sum(audience)))
movie = movie %>% group_by(producer) %>% mutate(producer_score = log(sum(audience)))
movie = movie %>% group_by(Importer) %>% mutate(Importer_score = log(sum(audience)))
movie = movie %>% group_by(Distributor) %>% mutate(Distributor_score = log(sum(audience)))
movie$name <- as.character(movie$name)
movie <- movie %>%
mutate(magic7 = ifelse(nchar(word(name, 1, sep = ":|-|,|!")) <= 7 &
nchar(word(name, 1, sep = ":|-|,|!")) > 1, 1, 0)) # if less than or equal to 7 then 1
movie$magic7 <- as.factor(movie$magic7)
ggplot(movie) + geom_boxplot(aes(x=magic7, y=audience))
movie$actor1 <- as.character(movie$actor1)
movie$actor2 <- as.character(movie$actor2)
movie$actor3 <- as.character(movie$actor3)
movie <- movie %>%
mutate(main_actors = ifelse(actor1 == "", 0, 1) + ifelse(actor2 == "", 0, 1) + ifelse(actor3 == "", 0, 1))
movie$main_actors <- as.factor(movie$main_actors)
ggplot(movie) + geom_boxplot(aes(x=main_actors, y=audience))
movie$star = ifelse(movie$star >= 8, 1, 0)
movie$month = ifelse(movie$month %in% c(5,7,8,12), 1, 0)
movie$month <- as.factor(movie$month)
movie$star <- as.factor(movie$star)
movie$year <- as.factor(movie$year)
# use gsub
ap <- movie %>%
gather(key, value, actor1:actor3) %>%
filter(value != "") %>%
group_by(value) %>%
summarise(actor_power = sum(audience)) %>%
select(value, actor_power)
movie <- movie %>%
left_join(ap, by = c("actor1" = "value"), suffix = c('', '1')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '2')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '3')) %>%
rename(actor_power1 = actor_power) %>%
mutate(actors_value = log((actor_power1 + ifelse(is.na(actor_power2), 0, actor_power2)
+ ifelse(is.na(actor_power3), 0, actor_power3))/
(1 + ifelse(is.na(actor_power2), 0, 1) + ifelse(is.na(actor_power3), 0, 1)))) # 1번 배우에 0.5, 2번 배우에 0.3, 3번 배우에 0.2 비중
# lm.fit <- lm(audience~., data = movie)
# step(lm.fit, direction = "both")
lm.fit <- lm(log(audience)~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie)
summary(lm.fit)
lm.pred <- predict(lm.fit)
rmse(movie$audience, exp(lm.pred))
rmse(movie$audience, lm.pred)
# lm.fit <- lm(audience~., data = movie)
# step(lm.fit, direction = "both")
lm.fit <- lm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie)
summary(lm.fit)
lm.pred <- predict(lm.fit)
rmse(movie$audience, lm.pred)
movie %>%
mutate(small_audience = audience/10000)
rmse <- function(real, pred){
rmse <- sqrt(mean((real-pred)^2))
rmse
}
taud <- sum(movie$audience)
movie$year <- as.numeric(movie$year)
year_impact <- movie %>%
filter(year != 2018) %>%
group_by(year) %>%
summarise(n = n(),
t_per_year = sum(audience),
standard_aud = t_per_year/n) %>%
select(year, standard_aud) %>%
mutate(mu = mean(standard_aud),
ratio = standard_aud/mu) %>%
select(year, ratio)
year_impact$year <- as.numeric(year_impact$year)
year_impact <- bind_rows(year_impact, data.frame(year = 2018, ratio = 1.15))
movie$month <- as.factor(movie$month)
movie <- movie %>%
mutate(country = as.factor(ifelse(country == "미국", 1, ifelse(country == "한국", 2, 0)))) # 1: 미국, 2: 한국, 3: 기타국
movie$genre <- as.character(movie$genre)
movie = movie[movie$genre != '서부극(웨스턴)' & movie$genre != '공연' & movie$genre != '뮤지컬' & movie$genre != '다큐멘터리',]
ggplot(movie, aes(audience)) + geom_histogram(bins=30)
ggplot(movie, aes(lit_audience)) + geom_histogram(bins=30)
movie <- movie %>%
mutate(small_audience = audience/10000)
ggplot(movie, aes(small_audience)) + geom_histogram(bins=30)
ggplot(movie, aes(log(small_audience))) + geom_histogram(bins=30)
ggplot(movie, aes(sqrt(small_audience))) + geom_histogram(bins=30)
ggplot(movie, aes(log(small_audience))) + geom_histogram(bins=30)
# 장르1 = 가족, 공포(호러), 애니메이션
# 장르2 = SF, 드라마, 멜로/로맨스, 미스터리, 스릴러, 코미디
# 장르3 = 범죄, 사극, 액션, 어드벤쳐, 전쟁, 판타지
movie$genre[movie$genre ==  '가족' | movie$genre ==  '공포(호러)' | movie$genre ==  '애니메이션'] = '장르1'
movie$genre[movie$genre ==  'SF' | movie$genre ==  '드라마' | movie$genre ==  '멜로/로맨스' | movie$genre == '미스터리' |
movie$genre == '스릴러' | movie$genre == '코미디'] = '장르2'
movie$genre[movie$genre ==  '범죄' | movie$genre ==  '사극' | movie$genre ==  '액션' | movie$genre ==  '어드벤처' |
movie$genre ==  '전쟁' | movie$genre ==  '판타지'] = '장르3'
movie$genre <- as.factor(movie$genre)
movie = movie %>% group_by(director) %>% mutate(director_score = log(sum(audience)))
movie = movie %>% group_by(producer) %>% mutate(producer_score = log(sum(audience)))
movie = movie %>% group_by(Importer) %>% mutate(Importer_score = log(sum(audience)))
movie = movie %>% group_by(Distributor) %>% mutate(Distributor_score = log(sum(audience)))
movie$name <- as.character(movie$name)
movie <- movie %>%
mutate(magic7 = ifelse(nchar(word(name, 1, sep = ":|-|,|!")) <= 7 &
nchar(word(name, 1, sep = ":|-|,|!")) > 1, 1, 0)) # if less than or equal to 7 then 1
movie$magic7 <- as.factor(movie$magic7)
ggplot(movie) + geom_boxplot(aes(x=magic7, y=audience))
ggplot(movie) + geom_boxplot(aes(x=magic7, y=small_audience))
ggplot(movie) + geom_boxplot(aes(x=magic7, y=audience))
movie$actor1 <- as.character(movie$actor1)
movie$actor2 <- as.character(movie$actor2)
movie$actor3 <- as.character(movie$actor3)
movie <- movie %>%
mutate(main_actors = ifelse(actor1 == "", 0, 1) + ifelse(actor2 == "", 0, 1) + ifelse(actor3 == "", 0, 1))
movie$main_actors <- as.factor(movie$main_actors)
ggplot(movie) + geom_boxplot(aes(x=main_actors, y=audience))
movie$star = ifelse(movie$star >= 8, 1, 0)
movie$month = ifelse(movie$month %in% c(5,7,8,12), 1, 0)
movie$month <- as.factor(movie$month)
movie$star <- as.factor(movie$star)
movie$year <- as.factor(movie$year)
movie$star
rmse(pcr.fit$fitted.values, movie$audience)
movie <- read.csv("dat.csv")
movie$star
summary(movie)
head(movie, 2)
summary(movie)
names(movie)
table(movie$name)[table(movie$name) > 1]
movie <- movie %>%
mutate(small_audience = audience/10000)
rmse <- function(real, pred){
rmse <- sqrt(mean((real-pred)^2))
rmse
}
# ggplot(movie) + geom_histogram(aes(audience))
# ggplot(movie) + geom_histogram(aes(log(audience)))
# ggplot(movie) + geom_histogram(aes(sqrt(log(audience))))
# ggplot(movie) + geom_histogram(aes(sqrt(audience)))
ggplot(movie) + geom_bar(aes(year))
taud <- sum(movie$audience)
movie$year <- as.numeric(movie$year)
year_impact <- movie %>%
filter(year != 2018) %>%
group_by(year) %>%
summarise(n = n(),
t_per_year = sum(audience),
standard_aud = t_per_year/n) %>%
select(year, standard_aud) %>%
mutate(mu = mean(standard_aud),
ratio = standard_aud/mu) %>%
select(year, ratio)
year_impact$year <- as.numeric(year_impact$year)
year_impact <- bind_rows(year_impact, data.frame(year = 2018, ratio = 1.15))
ggplot(movie, aes(audience)) + geom_histogram(bins=30)
# overmovie <- movie[movie$audience > 1200000,]
#
# for (i in 1:3){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
#
# overmovie <- movie[movie$audience > 3500000,]
#
# for (i in 1:4){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
movie$month <- as.factor(movie$month)
movie <- movie %>%
mutate(country = as.factor(ifelse(country == "미국", 1, ifelse(country == "한국", 2, 0)))) # 1: 미국, 2: 한국, 3: 기타국
movie$genre <- as.character(movie$genre)
movie = movie[movie$genre != '서부극(웨스턴)' & movie$genre != '공연' & movie$genre != '뮤지컬' & movie$genre != '다큐멘터리',]
ggplot(movie, aes(small_audience)) + geom_histogram(bins=30)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=month))
# ggplotly(g)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=genre))
# ggplotly(g)
# 장르1 = 가족, 공포(호러), 애니메이션
# 장르2 = SF, 드라마, 멜로/로맨스, 미스터리, 스릴러, 코미디
# 장르3 = 범죄, 사극, 액션, 어드벤쳐, 전쟁, 판타지
movie$genre[movie$genre ==  '가족' | movie$genre ==  '공포(호러)' | movie$genre ==  '애니메이션'] = '장르1'
movie$genre[movie$genre ==  'SF' | movie$genre ==  '드라마' | movie$genre ==  '멜로/로맨스' | movie$genre == '미스터리' |
movie$genre == '스릴러' | movie$genre == '코미디'] = '장르2'
movie$genre[movie$genre ==  '범죄' | movie$genre ==  '사극' | movie$genre ==  '액션' | movie$genre ==  '어드벤처' |
movie$genre ==  '전쟁' | movie$genre ==  '판타지'] = '장르3'
movie$genre <- as.factor(movie$genre)
movie = movie %>% group_by(director) %>% mutate(director_score = log(sum(audience)))
movie = movie %>% group_by(producer) %>% mutate(producer_score = log(sum(audience)))
movie = movie %>% group_by(Importer) %>% mutate(Importer_score = log(sum(audience)))
movie = movie %>% group_by(Distributor) %>% mutate(Distributor_score = log(sum(audience)))
movie$name <- as.character(movie$name)
movie <- movie %>%
mutate(magic7 = ifelse(nchar(word(name, 1, sep = ":|-|,|!")) <= 7 &
nchar(word(name, 1, sep = ":|-|,|!")) > 1, 1, 0)) # if less than or equal to 7 then 1
movie$magic7 <- as.factor(movie$magic7)
ggplot(movie) + geom_boxplot(aes(x=magic7, y=audience))
movie$actor1 <- as.character(movie$actor1)
movie$actor2 <- as.character(movie$actor2)
movie$actor3 <- as.character(movie$actor3)
movie <- movie %>%
mutate(main_actors = ifelse(actor1 == "", 0, 1) + ifelse(actor2 == "", 0, 1) + ifelse(actor3 == "", 0, 1))
movie$main_actors <- as.factor(movie$main_actors)
ggplot(movie) + geom_boxplot(aes(x=main_actors, y=audience))
movie$star = ifelse(movie$star >= 8, 1, 0)
movie$month = ifelse(movie$month %in% c(5,7,8,12), 1, 0)
movie$month <- as.factor(movie$month)
movie$star <- as.factor(movie$star)
movie$year <- as.factor(movie$year)
movie$star
# use gsub
ap <- movie %>%
gather(key, value, actor1:actor3) %>%
filter(value != "") %>%
group_by(value) %>%
summarise(actor_power = sum(audience)) %>%
select(value, actor_power)
movie <- movie %>%
left_join(ap, by = c("actor1" = "value"), suffix = c('', '1')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '2')) %>%
left_join(ap, by = c("actor2" = "value"), suffix = c('', '3')) %>%
rename(actor_power1 = actor_power) %>%
mutate(actors_value = log((actor_power1 + ifelse(is.na(actor_power2), 0, actor_power2)
+ ifelse(is.na(actor_power3), 0, actor_power3))/
(1 + ifelse(is.na(actor_power2), 0, 1) + ifelse(is.na(actor_power3), 0, 1)))) # 1번 배우에 0.5, 2번 배우에 0.3, 3번 배우에 0.2 비중
# lm.fit <- lm(audience~., data = movie)
# step(lm.fit, direction = "both")
lm.fit <- lm(small_audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie)
summary(lm.fit)
lm.pred <- predict(lm.fit)
rmse(movie$small_audience, lm.pred)
ggplot(bind_cols(real = movie$small_audience, pred = exp(lm.pred)), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$small_audience, pred = lm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$audience, res = lm.fit$residuals), aes(real, res)) + geom_point() + geom_smooth()
ggplot(bind_cols(real = movie$small_audience, res = lm.fit$residuals), aes(real, res)) + geom_point() + geom_smooth()
glm.fit <- glm(small_audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+main_actors*actors_value, data = movie, family = "poisson")
summary(glm.fit)
# step(glm.fit, direction = "both")
glm.pred <- predict(glm.fit, type = "response")
rmse(movie$small_audience, glm.pred)
head(bind_cols(real = movie$audience, pred = glm.pred))
head(bind_cols(real = movie$small_audience, pred = glm.pred))
ggplot(bind_cols(real = movie$small_audience, pred = glm.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
rf <- randomForest(small_audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie, ntree = 1000, maxnodes = 6)
rf.pred <- predict(rf)
rmse(movie$small_audience, rf.pred)
ggplot(bind_cols(real = movie$small_audience, pred = rf.pred), aes(x=real, y=pred)) + geom_point() + geom_smooth()
library(gbm)
library(gbm)
install.packages()
install.packages("gbm")
library(gbm)
gbm.fit <- gbm(small_audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie, distribution = "poisson",
shrinkage = 0.01, interaction.depth = 4)
gbm.fit <- gbm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie, distribution = "poisson",
shrinkage = 0.01, interaction.depth = 4)
gbm.fit
summary(gbm.fit)
gbm.fit <- gbm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors*actors_value, data = movie, distribution = "poisson",
shrinkage = 0.01, interaction.depth = 4, n.trees = 1000)
gbm.fit
summary(gbm.fit)
predict(gbm.fit)
plot(Boston.boost,i="lstat")
plot(gbm.fit,i="lstat")
plot(gbm.fit)
plot(gbm.fit, i="rm")
plot(gbm.fit, i="audience")
gbm.fit <- gbm(audience~month+country+screen+genre+limit+star+director_score+producer_score+Importer_score+
Distributor_score+magic7+main_actors+actors_value, data = movie, distribution = "poisson",
shrinkage = 0.01, interaction.depth = 4, n.trees = 1000, cv.folds = 10)
gbm.fit
summary(gbm.fit)
plot(gbm.fit, i="actors_value")
predict(gbm.fit)
predict(gbm.fit, n.trees = 1000)
gbm.pred <- predict(gbm.fit, n.trees = 1000)
rmse(movie$audience, gbm.pred)
g <- ggplot(movie) + geom_density(aes(x=audience, color=director))
ggplotly(g)
library(tidyverse)
library(data.table)
library(stringr)
library(plotly)
library(caret)
library(lubridate)
library(randomForest)
library(SuperLearner)
library(gbm)
movie <- read.csv("dat.csv")
head(movie, 2)
summary(movie)
names(movie)
table(movie$name)[table(movie$name) > 1]
movie <- movie %>%
mutate(small_audience = audience/10000)
rmse <- function(real, pred){
rmse <- sqrt(mean((real-pred)^2))
rmse
}
# ggplot(movie) + geom_histogram(aes(audience))
# ggplot(movie) + geom_histogram(aes(log(audience)))
# ggplot(movie) + geom_histogram(aes(sqrt(log(audience))))
# ggplot(movie) + geom_histogram(aes(sqrt(audience)))
ggplot(movie) + geom_bar(aes(year))
taud <- sum(movie$audience)
movie$year <- as.numeric(movie$year)
year_impact <- movie %>%
filter(year != 2018) %>%
group_by(year) %>%
summarise(n = n(),
t_per_year = sum(audience),
standard_aud = t_per_year/n) %>%
select(year, standard_aud) %>%
mutate(mu = mean(standard_aud),
ratio = standard_aud/mu) %>%
select(year, ratio)
year_impact$year <- as.numeric(year_impact$year)
year_impact <- bind_rows(year_impact, data.frame(year = 2018, ratio = 1.15))
ggplot(movie, aes(audience)) + geom_histogram(bins=30)
# overmovie <- movie[movie$audience > 1200000,]
#
# for (i in 1:3){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
#
# overmovie <- movie[movie$audience > 3500000,]
#
# for (i in 1:4){
#   movie <- bind_rows(movie, overmovie)
# }
# ggplot(movie, aes(audience)) + geom_histogram(bins=30)
movie$month <- as.factor(movie$month)
movie <- movie %>%
mutate(country = as.factor(ifelse(country == "미국", 1, ifelse(country == "한국", 2, 0)))) # 1: 미국, 2: 한국, 3: 기타국
movie$genre <- as.character(movie$genre)
movie = movie[movie$genre != '서부극(웨스턴)' & movie$genre != '공연' & movie$genre != '뮤지컬' & movie$genre != '다큐멘터리',]
ggplot(movie, aes(small_audience)) + geom_histogram(bins=30)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=month))
# ggplotly(g)
# g <- ggplot(movie) + geom_density(aes(x=audience, color=genre))
# ggplotly(g)
# 장르1 = 가족, 공포(호러), 애니메이션
# 장르2 = SF, 드라마, 멜로/로맨스, 미스터리, 스릴러, 코미디
# 장르3 = 범죄, 사극, 액션, 어드벤쳐, 전쟁, 판타지
movie$genre[movie$genre ==  '가족' | movie$genre ==  '공포(호러)' | movie$genre ==  '애니메이션'] = '장르1'
movie$genre[movie$genre ==  'SF' | movie$genre ==  '드라마' | movie$genre ==  '멜로/로맨스' | movie$genre == '미스터리' |
movie$genre == '스릴러' | movie$genre == '코미디'] = '장르2'
movie$genre[movie$genre ==  '범죄' | movie$genre ==  '사극' | movie$genre ==  '액션' | movie$genre ==  '어드벤처' |
movie$genre ==  '전쟁' | movie$genre ==  '판타지'] = '장르3'
movie$genre <- as.factor(movie$genre)
g <- ggplot(movie) + geom_density(aes(x=audience, color=director))
ggplotly(g)
g <- ggplot(movie) + geom_density(aes(x=audience, color=month))
ggplotly(g)
g <- ggplot(movie) + geom_density(aes(x=audience, color=genre))
ggplotly(g)
director1 <- movie %>%
group_by(director) %>%
summarise(n= n())
director1
director1 <- movie %>%
group_by(director) %>%
summarise(n= n()) %>%
filter(n==1)
director1
g <- ggplot(movie[-movie$director %in% director1$director,]) + geom_density(aes(x=audience, color=director))
ggplotly(g)
g <- ggplot(movie[-(movie$director %in% director1$director),]) + geom_density(aes(x=audience, color=director))
ggplotly(g)
movie[-(movie$director %in% director1$director),]
g <- ggplot(movie[(movie$director %in% director1$director),]) + geom_density(aes(x=audience, color=director))
movie[(movie$director %in% director1$director),]
nrow(movie)
movie[-(movie$director %in% director1$director),]
movie[!(movie$director %in% director1$director),]
g <- ggplot(movie[!(movie$director %in% director1$director),]) + geom_density(aes(x=audience, color=director))
ggplotly(g)
director1 <- movie %>%
group_by(director) %>%
summarise(n= n()) %>%
filter(n<=1)
g <- ggplot(movie[!(movie$director %in% director1$director),]) + geom_density(aes(x=audience, color=director))
ggplotly(g)
length(unique(movie$director))
names(movie)
head(movie, 2)
