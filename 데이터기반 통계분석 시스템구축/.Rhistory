x3 = seq(-1, 1, length.out = 100)
y3 = exp(x3)
plot()
plot(y3~x3)
plot(y3~x3, type = 'l')
plot(y3~x3, type = 'l', ylim = c(0, 5))
#### matrix
matrix(runif(15), 5, 3)
X[3,2]
#### matrix
X = matrix(runif(15), 5, 3)
X[3,2]
X[,2, drop=F]
X[4, , drop = F]
t(X)
Xt = t(X)
Xt%*%X
X2 = Xt%*%X
X- = solve(X2) # 역행렬
Xinv = solve(X2) # 역행렬
Xinv %*% X2
X2 %*% Xinv
p = 5
n = 4
a = matrix(1:5, p, 1)
X = matrix(1:20, n, p)
t(a) %*% a
t(X) %*% X
solve(t(X) %*% X)
a = matrix(runif(5), p, 1)
X = matrix(runif(20), n, p)
t(a) %*% a
t(X) %*% X
solve(t(X) %*% X)
t(a)%*%solve(t(X) %*% X)%*%a
a
X
t(X) %*% X
p = 5
n = 4
a = matrix(runif(5), p, 1)
X = matrix(runif(20), n, p)
t(a) %*% a
t(X) %*% X
solve(t(X) %*% X)
t(a)%*%solve(t(X) %*% X)%*%a
a = matrix(runif(5, 0, 10), p, 1)
X = matrix(runif(20, 0, 10), n, p)
t(a) %*% a
t(X) %*% X
solve(t(X) %*% X)
t(a)%*%solve(t(X) %*% X)%*%a
mean_mat <- matrix(0, 1, -1)
mean_mat <- matrix(c(0, 1, -1))
mean_mat
cov_mat <- matrix(c(1, 0.5, 0, 0.5, 1, 0.3, 0, 0.3, 1))
cov_mat
cov_mat <- matrix(c(1, 0.5, 0, 0.5, 1, 0.3, 0, 0.3, 1), 3, 3)
cov_mat
x = c(1, 0, 1/2)
X = c(1, 0, 1/2)
mean_mat <- matrix(c(0, 1, -1))
X = matrix(c(1, 0, 1/2))
gX = exp(t(X-mean_mat)%*%t(cov_mat)%*%(X-mean_mat))
gX
gX = exp((t(X-mean_mat)%*%t(cov_mat)%*%(X-mean_mat))/-2) # X가 주어졌을 때 다변량정규분포의 pdf
gX
gX = exp((t(X-mean_mat)%*%solve(t(cov_mat))%*%(X-mean_mat))/-2) # X가 주어졌을 때 다변량정규분포의 pdf
gX
x = seq(0, 10, length.out = 1000)
ppois(x, 1)
plot(py~px, 'l')
plot(py~px, type = 'l')
px = seq(0, 10, length.out = 1000)
py = ppois(px, 1)
plot(py~px, type = 'l')
plot(py~px, type = 's')
abline(h = 1, col = 'red', lty = 2)
py = ppois(px, lambda = 3)
plot(py~px, type = 'l')
plot(py~px, type = 's')
abline(h = 1, col = 'red', lty = 2)
py2 = ppoints(px, lambda = 2)
py = ppois(px, lambda = 1)
px = seq(0, 10, length.out = 1000)
py = ppois(px, lambda = 1)
plot(py~px, type = 'l')
plot(py~px, type = 's')
abline(h = 1, col = 'red', lty = 2)
line(px, py2, type = 'l', col = 'green')
line(px, py2, col = 'green')
abline(px, py2, col = 'green')
py2 = ppois(px, lambda = 2)
abline(px, py2, col = 'green')
abline(px, py2, type = 'l',col = 'green')
lines(px, py2, col = 'green')
px = seq(0, 10, length.out = 1000)
py = ppois(px, lambda = 1)
py2 = ppois(px, lambda = 2)
plot(py~px, type = 'l')
plot(py~px, type = 's')
abline(h = 1, col = 'red', lty = 2)
lines(px, py2, col = 'green')
n = 1000
z = rexp(n)
n = 10000
z = rexp(n)
for (i in 1:1000)
{
idx = sample(1:n, 25)
}
idx
x = c()
for (i in 1:1000)
{
idx = sample(1:n, 25)
x[i] = mean(z[idx])
}
hist(x)
## 감마 분포
gamma(3.1)
gamma(2)
gamma(3)
gamma(4)
gamma(5)
gamma(6)
xg = seq(0, 10, length.out = 100)
yg = gamma(xg, 2, 0.5)
?gamma
yg = gamma( 2, 0.5)
alphag = 2
betag = 0.5
yg = xg^(alphag-1) * (exp(-x/betag)) / (gamma(2)*(betag^alphag))
plot(xg, yg, type = 'l')
alphag = 2
betag = 0.5
Gamma(alphag, betag)
betag = 0.5
Gamma(alphag, betag)
xg = seq(0, 10, length.out = 100)
Gamma(xg, alphag, betag)
?Gamma
?gamma
yg = dgamma(xg, alphag, rate = betag)
plot(xg, yg, type = 'l')
yg2 = dgamma(xg, alphag2, rate = betag)
plot(xg, yg, type = 'l')
lines(xg, yg2, type = 'l')
alphag2 = 8
betag = 0.5
xg = seq(0, 10, length.out = 100)
yg = dgamma(xg, alphag, rate = betag)
yg2 = dgamma(xg, alphag2, rate = betag)
plot(xg, yg, type = 'l')
lines(xg, yg2, type = 'l')
lines(xg, yg2, type = 'l', col = 'red')
yg = dgamma(xg, alphag, rate = betag, log = T)
yg2 = dgamma(xg, alphag2, rate = betag, log = T)
plot(xg, yg, type = 'l')
lines(xg, yg2, type = 'l', col = 'red')
yg = dgamma(xg, alphag, rate = 1/betag, log = T)
yg2 = dgamma(xg, alphag2, rate = 1/betag, log = T)
plot(xg, yg, type = 'l')
yg = dgamma(xg, alphag, rate = 1/betag)
yg2 = dgamma(xg, alphag2, rate = 1/betag)
plot(xg, yg, type = 'l')
lines(xg, yg2, type = 'l', col = 'red')
# Bern MLE estimation
sampl <- c(1,1,0,1,1)
theta <- sum(sampl)/length(sampl)
theta
dbinom(sampl, size = 1, prob = 0.5, log = TRUE)
dbinom(sampl, size = 1, prob = 0.5)
dbinom(sampl, size = 1, prob = 0.5, log = TRUE)
loglike <- like <- c() # make null vector
theta.vec <- seq(0,1, length.out = 100)
thetaNow <- sum(sampl)/length(sampl)
?prod
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dbinom(sampl, size = 1, prob = theta, log = FALSE))
loglike[i] <- prod(dbinom(sampl, size = 1, prob = theta, log = TRUE))
}
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
?dbinom
plot(theta.vec, like, type = 'l', col = 'blue')
dbinom(sampl, size = 1, prob = 0.5, log = FALSE)
dbinom(sampl, size = 1, prob = 0.6, log = FALSE)
dbinom(sampl, size = 1, prob = 0.8, log = FALSE)
dbinom(sampl, size = 1, prob = 0.6, log = FALSE)
# Norm MLE estimation
sampl_N <- c(0.1, 0.5, 0.3, 0.15, 0.2)
loglike <- like <- c()
theta.vec <- seq(0, 1, length.out = 100)
?dnorm
sampl_N <- c(0.1, 0.5, 0.3, 0.15, 0.2)
loglike <- like <- c()
theta.vec <- seq(0, 1, length.out = 100)
for (i in 1:100)
{
theta <- thata.vec[i]
like[i] <- prod(dnorm(sampl_N, theta, 1, log = FALSE))
loglike[i] <- prod(dnorm(sampl_N, theta, 1, log = TRUE))
}
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
sampl_N <- c(0.1, 0.5, 0.3, 0.15, 0.2)
loglike <- like <- c()
theta.vec <- seq(0, 1, length.out = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dnorm(sampl_N, theta, 1, log = FALSE))
loglike[i] <- prod(dnorm(sampl_N, theta, 1, log = TRUE))
}
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
plot(theta.vec, like, type = 'l', col = 'blue')
mean(sampl_N)
plot(theta.vec, loglike, type = 'l', col = 'red')
# Bern MLE estimation
sampl_B <- c(1,1,0,1,1)
thetaNow <- sum(sampl_B)/length(sampl_B)
dbinom(sampl_B, size = 1, prob = 0.6, log = FALSE)
loglike <- like <- c() # make null vector
theta.vec <- seq(0,1, length.out = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dbinom(sampl_B, size = 1, prob = theta, log = FALSE)) # multiply all vectors in it
loglike[i] <- sum(dbinom(sampl_B, size = 1, prob = theta, log = TRUE))
}
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
# Norm MLE estimation given sigma
sampl_N <- c(0.1, 0.5, 0.3, 0.15, 0.2)
loglike <- like <- c()
theta.vec <- seq(0, 1, length.out = 100)
for (i in 1:100)
{
theta <- theta.vec[i]
like[i] <- prod(dnorm(sampl_N, theta, 1, log = FALSE))
loglike[i] <- sum(dnorm(sampl_N, theta, 1, log = TRUE)) # use sum in log forms
}
plot(theta.vec, like, type = 'l', col = 'blue')
plot(theta.vec, loglike, type = 'l', col = 'red')
logsimu <- matrix(0, 100, 100)
# Norm MLE estimation mu and sigma ungiven
sigma.vec <- seq(0, 0.5, length.out = 100)
mu.vec <- seq(-1, 1, length.out = 100)
simu <- matrix(0, 100, 100)
logsimu <- matrix(0, 100, 100)
for (i in 1:100)
{
for (j in 1:100)
{
simu[i, j] = prod(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = FALSE))
logsimu[i, j] = sum(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = TRUE))
}
}
filled.contour(mu.vec, sigma.vec, simu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 20, col = heat.colors(20))
# Norm MLE estimation mu and sigma ungiven
sigma.vec <- seq(0, 0.3, length.out = 100)
mu.vec <- seq(-0.5, 1, length.out = 100)
simu <- matrix(0, 100, 100)
logsimu <- matrix(0, 100, 100)
for (i in 1:100)
{
for (j in 1:100)
{
simu[i, j] = prod(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = FALSE))
logsimu[i, j] = sum(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = TRUE))
}
}
filled.contour(mu.vec, sigma.vec, simu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 20, col = heat.colors(20))
# Norm MLE estimation mu and sigma ungiven
sigma.vec <- seq(0, 0.3, length.out = 100)
mu.vec <- seq(-0.5, 1, length.out = 100)
simu <- matrix(0, 100, 100)
logsimu <- matrix(0, 100, 100)
for (i in 1:100)
{
for (j in 1:100)
{
simu[i, j] = prod(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = FALSE), na.rm = TRUE)
logsimu[i, j] = sum(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = TRUE), na.rm = TRUE)
}
}
filled.contour(mu.vec, sigma.vec, simu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, simu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 20, col = heat.colors(20))
filled.contour(mu.vec, sigma.vec, simu, nlevels = 20, col = heat.colors(30))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 20, col = heat.colors(30))
filled.contour(mu.vec, sigma.vec, simu, nlevels = 30, col = heat.colors(30))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 30, col = heat.colors(30))
sigma.vec <- seq(0.1, 0.3, length.out = 100)
mu.vec <- seq(0, 1, length.out = 100)
simu <- matrix(0, 100, 100)
logsimu <- matrix(0, 100, 100)
for (i in 1:100)
{
for (j in 1:100)
{
simu[i, j] = prod(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = FALSE), na.rm = TRUE)
logsimu[i, j] = sum(dnorm(sampl_N, mu.vec[i], sigma.vec[j], log = TRUE), na.rm = TRUE)
}
}
filled.contour(mu.vec, sigma.vec, simu, nlevels = 30, col = heat.colors(30))
filled.contour(mu.vec, sigma.vec, logsimu, nlevels = 30, col = heat.colors(30))
filled.contour(mu.vec, sigma.vec, simu, nlevels = 30, col = heat.colors(30))
library(ggplot2)
head(msleep)
geom_point(msleep, aes(bodywt, sleep_total))
ggplot(msleep) + geom_point(aes(bodywt, sleep_total))
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total))
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore))
ggplot(msleep, aes(bodywt, sleep_total))
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore)) # color by vore
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore)) + facet_grid(-vore)
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore)) + facet_grid(~vore)
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore), size = 3)
ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore), size = 5)
scatterplot <- ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore), size = 5)
scatterplot <- ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore))
ScatterPlot <- ScatterPlot + geom_point(size = 5) +
xlab('Log Body Weight') + ylab('Total Sleep Hours') + ggtitle("Some Sleep Data")
scatterplot <- ggplot(msleep) + geom_point(aes(log(bodywt), sleep_total, color = vore))
ScatterPlot <- scatterplot + geom_point(size = 5) +
xlab('Log Body Weight') + ylab('Total Sleep Hours') + ggtitle("Some Sleep Data")
ScatterPlot
scatterplot <- ggplot(msleep, aes(log(bodywt), sleep_total, color = vore))
ScatterPlot <- scatterplot + geom_point(size = 5) +
xlab('Log Body Weight') + ylab('Total Sleep Hours') + ggtitle("Some Sleep Data")
ScatterPlot
ggplot(msleep, aes(vore, sleep_total))
ggplot(msleep, aes(vore, sleep_total)) + geom_point()
ggplot(msleep, aes(vore, sleep_total)) + geom_jitter()
ggplot(msleep, aes(vore, sleep_total)) + geom_jitter(color = vore)
ggplot(msleep, aes(vore, sleep_total, color = vore)) + geom_jitter()
ggplot(msleep, aes(vore, sleep_total, color = vore)) + geom_jitter(position = position_jitter(width = 0.2),
size = 5, alpha = 0.5)
dane <- data.frame(mylevels = c(1,2,5,9), myvalues = c(2,5,3,4))
head(dane)
ggplot(dane, aes(factor(mylevels), myvalues)) + geom_line(group = c(1,1,2,2)) + geom_point(size=3)
ggplot(dane, aes(factor(mylevels), myvalues)) + geom_line(group = 1) + geom_point(size=3)
ggplot(dane, aes(factor(mylevels), myvalues)) + geom_line(group = c(1,1,2,2)) + geom_point(size=3)
data("economics")
data("presidential")
data("economics"); head(economics)
data("presidential"); head(presidential)
ggplot(economics, aes(date, unemploy)) + geom_line()
president = subset(presidential, start > economics$date[1])
ggplot(economics) + geom_rect(aes(xmin=start, xmax=end, fill = party), ymin=-Inf, ymax=Inf, data = president) +
geom_line(aes(date, unemploy), data = economics)
ggplot(economics) + geom_rect(aes(xmin=start, xmax=end, fill = party), ymin=-Inf, ymax=Inf, data = president, color = "black") +
geom_line(aes(date, unemploy), data = economics)
library(datasets)
data("airquality")
aq_trim <- airquality[which(airquality$Month == 7 | airquality$Month == 8 | airquality$Month == 9),]
aq_trim$Month <- factor(aq_trim$Month, labels = c("July", "August", "September"))
ggplot(aq_trim, aes(Day, Ozone, size = Wind, fill = Temp)) + geom_point(shape = 21) +
ggtitle("Air Quality in New York by Day") + labs(x = "Day of the Month", y = "Ozone(prob)") +
scale_x_continuous(breaks = seq(1, 31, 5))
head(aq_trim)
ggplot(aq_trim, aes(Day, Ozone, size = Wind, fill = Temp)) + geom_point(shape = 21) +
ggtitle("Air Quality in New York by Day") + labs(x = "Day of the Month", y = "Ozone(prob)") +
scale_x_continuous(breaks = seq(1, 31, 5)) # xlab word writing point
ggplot(aq_trim, aes(Day, Ozone, size = Wind, fill = Temp)) + geom_point(shape = 21) +
ggtitle("Air Quality in New York by Day") + labs(x = "Day of the Month", y = "Ozone(prob)") +
scale_x_continuous(breaks = seq(1, 31, 5)) # xlab word writing point
ggplot(economics) + geom_rect(aes(xmin=start, xmax=end, fill = party), ymin=-Inf, ymax=Inf, data = president, color = "black") +
geom_line(aes(date, unemploy), data = economics) # black color show when president changed
ggplot(msleep, aes(vore, sleep_total, color = vore)) + geom_jitter(position = position_jitter(width = 0.2), # jitter in 0.2 width
size = 5, alpha = 0.5) # size of dot is 5, capacity 0.5
ggplot(aq_trim, aes(Day, Ozone, size = Wind, fill = Temp)) + geom_point(shape = 21) +
ggtitle("Air Quality in New York by Day") + labs(x = "Day of the Month", y = "Ozone(prob)") +
scale_x_continuous(breaks = seq(1, 31, 5)) # xlab word writing point
nrow(aq_trim)
View(aq_trim)
festival.data <- read.table("DownloadFestival.dat", sep = '\t', header = T)
festival.data <- read.table("data/DownloadFestival.dat", sep = '\t', header = T)
head(festival.data)
festival.data.stack <- melt(festival.data, id = c('ticknumb', 'gender'))
library(tidyverse)
festival.data.stack <- melt(festival.data, id = c('ticknumb', 'gender'))
library(reshape2)
festival.data.stack <- melt(festival.data, id = c('ticknumb', 'gender'))
colnames(festival.data.stack)[3:4] = c("day", "score")
day1Hist <- ggplot(festival.data, aes(day1))
day1Hist <- ggplot(festival.data, aes(day1)); dayHist
day1Hist <- ggplot(festival.data, aes(day1)); day1Hist
day1Hist <- ggplot(festival.data, aes(day1)); day1Hist + geom_histogram()
day1Hist <- ggplot(festival.data, aes(day1)); day1Hist + geom_histogram(color='royalblue1', fill = 'royalblue2')
day1Hist <- ggplot(festival.data, aes(day1)); day1Hist + geom_histogram(color='royalblue1', fill = 'royalblue2', binwidth = 0.1)
day1Hist + geom_histogram(color = 'royalblue3', fill = 'yellow', bins = 35, binwidth = 0.2, aes(y=..density..))
# bins is number of bars
day1Hist + geom_histogram(binwidth = 0.1, aes(y=..density..), color = "black", fill = "lightblue") +
geom_density(alpha = 0.2, fill = '#FF6666')
Histogram.3day2 <- ggplot(festival.data.stack, aes(score)) +
geom_histogram(binwidth = 0.4, color = "black", fill = "yellow") +
labs(x = "Score", y = "Counts")
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 + facet_grid(gender~day)
Histogram.3day2 <- ggplot(festival.data.stack, aes(score, ..density)) +
geom_histogram(binwidth = 0.4, color = "black", fill = "yellow") +
labs(x = "Score", y = "Counts")
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 <- ggplot(festival.data.stack, aes(score, y = ..density)) +
geom_histogram(binwidth = 0.4, color = "black", fill = "yellow") +
labs(x = "Score", y = "Counts")
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 <- ggplot(festival.data.stack, aes(score, ..density..)) +
geom_histogram(binwidth = 0.4, color = "black", fill = "yellow") +
labs(x = "Score", y = "Counts")
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 + facet_grid(gender~day)
Histogram.3day2 + facet_grid(gender~day)
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 + facet_grid(gender~day)
Scatterplot <- ggplot(festival.data.stack, aes(x=gender, y=score, color=gender)) +
geom_point(position = "jitter") + facet_grid(~dat)
Scatterplot
Scatterplot <- ggplot(festival.data.stack, aes(x=gender, y=score, color=gender)) +
geom_point(position = "jitter") + facet_grid(~day)
Scatterplot
Scatterplot + scale_color_manual(values = c('darkorange', 'darkorchid4'))
Scatterplot + geom_boxplot(alpha=0.2, color='black', fill='orange')
library(tidyverse)
library(maps)
library(mapdata)
if(!require(mapdata)){install.packages("mapdata") ;library(mapdata)}
# USA map
par(mfrow = c(1,2))
map(database = "usa")
map(database = "county")
# South Korea
map(database = "world", region = "South Korea")
# South Korea
map(database = "world")
# South Korea
map(database = "world", region = "South Korea")
map("World2Hires", "South Korea")
map("world2Hires", "South Korea")
data(us.cities)
head(us.cities)
map("state", "GEORGIA")
map.cities(us.cities, country = "GA")
map('world', fill = TRUE, col = rainbow(30))
par(mfrow = c(1,1))
map('world', fill = TRUE, col = rainbow(30))
map("state", "GEORGIA")
map.cities(us.cities, country = "GA")
Scatterplot + geom_boxplot(alpha=0.2, color='black', fill='orange')
Scatterplot + scale_color_manual(values = c('darkorange', 'darkorchid4'))
Scatterplot + geom_boxplot(alpha=0.2, color='black', fill='orange')
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/WhiteWine.R', echo=TRUE)
nrow(white)
hist(fixed_a)
hist(fixed_acidity)
hist(fixed_acidity, binwidth = 0.5)
?hist
hist(fixed_acidity, break = 0.5)
hist(fixed_acidity, breaks = 0.5)
hist(fixed_acidity, breaks = 10)
hist(fixed_acidity, breaks = 20)
hist(volatile_acidity)
hist(volatile_acidity, breaks = 20)
hist(citric_acid, breaks = 20)
hist(citric_acid, breaks = 10)
2
hist(citric_acid, breaks = 20)
hist(residual_sugar, breaks = 20)
hist(residual_sugar, breaks = 10)
hist(chlorides, breaks = 20)
hist(free_sulfur_dioxide, breaks = 20)
hist(total_sulfur_dioxide, breaks = 20)
hist(density, breaks = 20)
hist(pH, breaks = 20)
hist(sulphates, breaks = 20)
hist(alcohol, breaks = 20)
hist(alcohol, breaks = 30)
hist(quality, breaks = 20)
table(quality)
# draw histograms
hist(fixed_acidity, breaks = 20)
hist(volatile_acidity, breaks = 20)
hist(volatile_acidity, breaks = 20) #
hist(citric_acid, breaks = 20)
hist(citric_acid, breaks = 30) # # outliers and
hist(log(citric_acid), breaks = 30) # # outliers and
hist(chlorides, breaks = 20) # some ranges have large number of observations
hist(log(chlorides), breaks = 20) # some ranges have large number of observations
hist(free_sulfur_dioxide, breaks = 20)
hist(free_sulfur_dioxide, breaks = 30)
hist(chlorides, breaks = 20) # some ranges have large number of observations ==> better to log
hist(log(chlorides), breaks = 20)
boxplot(log(chlorides)~quality, col = 3:9)
boxplot(chlorides~quality, col = 3:9)
boxplot(log(chlorides)~quality, col = 3:9)
hist(log(chlorides), breaks = 20)
hist(log10(chlorides), breaks = 20)
hist(log2(chlorides), breaks = 20)
hist(log10(chlorides), breaks = 20)
hist(log(chlorides), breaks = 20)
View(wc)
