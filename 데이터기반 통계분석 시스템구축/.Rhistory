(1:3)[c(TRUE,NA)]
(1:3)[c(TRUE,NA,FALSE)]
diag(rep(1, 10)) # 1을 원소로 가지는 10X10짜리 대각행
A = data.frame(x1 = rep(0,10), x2 = rep('b', 10))
B = data.frame(x2 = rep(0,10), x3 = rep('d', 10))
AB = cbind(A,B)
head(AB)
a = matrix(1:10, 5,2)
a[seq(1,2)]
a[seq(1,,2)]
seq(1,2)
seq(1,,2)
seq(2,1)
seq(1,10,2)
a[seq(1,10,2)]
a[seq(1,10,2),]
a[seq(1,5,2),]
paste0("r", 1:10)
paste("r", 1:10, sep = "        ")
paste("r", 1:10, sep = "_")
# function()
testfunction <- function(x1,x2)
{
v1 = x1^2 + x2
v2 = x1^2 - x2
return(c(v1,v2))
}
testfunction(3, 7)
# 숙제: rowwise average function
# setwd('./fig') 현 폴더의 fig 폴더로 가서 열어라
# setwd('../fig') 현 폴더의 상위폴더에서 fig 폴더로 가서 열어라
# setwd('..../fig') 현 폴더의 상위폴더의 상위폴더에 가서 fig를 열어라
View(CO2)
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
a = list.files()
a[3]
b = list.dirs(recursive = FALSE)
b[1]
getwd()
data(mtcars)
View(mtcars)
# View(mtcars)
str(mtcars)
names(mtcars)
plot(mpg~disp, mtcars)
a = "mpg~disp"
a_f = as.formula(a)
plot(a, mtcars)
plot(a_f, mtcars)
a_f = as.formula(a); class(a_f)
?plot
plot(hp~disp, mtcars)
library(tidyverse)
table1
table2
table3
table4a
table4b
set.seed(1)
x = rnorm(100)
y = 2 + 2*x + rnorm(100)
plot(y~x)
plot(y~x, main = "y=2x+2") # or plot(x,y)
# plot types : p(point), l(line), b(both point and line), s(step), n(no plot)
x = seq(-2, 2, length.out = 10)
x
plot(x, y, type = 'p')
# plot types : p(point), l(line), b(both point and line), s(step), n(no plot)
x = seq(-2, 2, length.out = 10)
y = x^2
plot(x, y, type = 'p')
plot(x, y, type = 'l')
plot(x, y, type = 'b')
plot(x, y, type = 's')
plot(x, y, type = 'n')
plot(x, y, type = 'n')
plot(x, y, type = 'b', lty = 3)
plot(x, y, type = 'b', pch = 2)
plot(x=1:25, y=rep(0,25), pch=1:25)
head(colors())
plot(x,y, type="b", xlab="xx", ylab="yy", main="y=x^2")
plot(x,y, type="b", xlab="xx", ylab="yy", main="y=x^2", col="lightblue")
plot(x,y, type="b", xlim= c(-1,1))
# draw multiple plots at once
plot(~mpg+disp+draft, mtcars, main="Simple Scatterplot Matrix")
# draw multiple plots at once
plot(~mpg+disp+drat, mtcars, main="Simple Scatterplot Matrix")
# draw multiple plots at once
plot(~mpg+disp+drat, mtcars, main="Simple Scatterplot Matrix", col = "orange")
# draw multiple plots at once
plot(~mpg+disp+drat, mtcars, main="Simple Scatterplot Matrix", col = "orange", pch = 19)
plot(x,y pch =20, main="scatter plot")
plot(x,y, pch =20, main="scatter plot")
abline(a=1, b=2, col="red")
abline(v=1, col="blue")
abline(h=1, col="green")
plot(x=1,y=1, type='n', xlim=c(0,10), ylim=c(0,5), xlab = 'time', ylab = '# of visiting')
x = 0:10
set.seed(1)
y=rpois(length(x), lambda=1)
points(x,y,col="blue", type="s")
points(x,y,col="red", type="l")
points(x,y,col="red", type="l", lty = 3)
plot(x=1,y=1, type='n', xlim=c(0,10), ylim=c(0,5), xlab = 'time', ylab = '# of visiting')
x = 0:10
set.seed(1)
y=rpois(length(x), lambda=1)
points(x,y,col="blue", type="s")
points(x,y,col="red", type="l", lty = 3)
plot(0,0, type='n', xliim=c(-2,2), ylim=c(-2,2))
plot(0,0, type='n', xlim=c(-2,2), ylim=c(-2,2))
x = c(-2,1,0,1,0)
y = c(0,-1,2,-2,1)
lines(x,y)
# NA is used for disconnect line
plot(0,0, NA,1,0)
y = c(0,-1,NA,-2,1)
ed for disconnect line
plot(0,0, type='n', xlim=c(-2,2), ylim=c(-2,2))
x = c(-2,1,NA,1,0)
y = c(0,-1,NA,-2,1)
lines(x,y)
plot(0,0, type='n', xlim=c(1,5), ylim=c(0,2))
x = seq(1,5,1)
x
abline(v=x, lty=1:length(x))
z = sort(rnorm(100))
y1 = 2+ x + rnorm(100)
plot(z, y1, col="blue", pch=3)
points(z, y1/2, col="red", pch=19)
legend("topright", c("pch_3", "pch_19"), col=c("blue", "red"), pch = c(3,19))
y1 = 2+ z + rnorm(100)
plot(z, y1, col="blue", pch=3)
points(z, y1/2, col="red", pch=19)
legend("topright", c("pch_3", "pch_19"), col=c("blue", "red"), pch = c(3,19))
set.seed(1)
x <- sort(rnorm(100))
y <- 3 + x^2 + rnorm(100)
plot(x, y, pch = 20)
lm(y~x)
fit = lm(y~x)
str(fit)
coef <- fit$coefficients
coef[1]
coef[2]
abline(coef[1], coef[2])
abline(coef[1], coef[2], col='red')
install.packages("FNN")
# y_hat(x) = 1/k * sum(index set of xi k-nearest to x * yi)
# KNN is non-parametric regression which means KNN doesn't assume model space
library(FNN)
knnx.index(x, 0, k=10)
x[47]
x[46]
k10zero <- knnx.index(x, 0, k=10)
k10zero[1,]
idx <- k10zero[1,]
points(x[idx], y[idx], pch = 19, col = 'green' )
abline(v=0, lty = 3)
mean(y[idx])
k10mean <- mean(y[idx])
k10mean0 <- mean(y[idx])
abline(h=k10mean0, col = 'blue')
eval.n = 100
eval.point = seq(-3,3,length.out = 100)
plot(x,y,pch=20)
idx.mat <- knnx.index(x, eval.point, k=10)
yhat <- rep(0, eval.n)
for (i in 1:eval.n){
yhat[i] <- mean(y[idx.mat[i,]])
}
lines(eval.point, yhat, type = 'l', col = 'red')
plot(x,y, pch =20, main="scatter plot")
abline(a=1, b=2, col="red") # a + bx
abline(v=1, col="blue") # vertical line
abline(h=1, col="green") # horizontal line
?abline
# One variable might be spread across multiple columns.
table4a
# One variable might be spread across multiple columns.
table4a %>%
gather(`1999`, `2000`, key="year", value="cases")
table4b
table4b %>%
gather(`1999`, `2000`, key="year", value = "populations")
left_join(table4a, table4b)
# One observation might be scattered across multiple rows.
table2
# One observation might be scattered across multiple rows.
table2 %>%
spread(key = type, value = count)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks %>%
spread(year, return)
stocks
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people %>%
spread("age", "height", value = value)
people <- tribble(
~name,             ~key,    ~value, ~obs,
#-----------------|--------|------|------
"Phillip Woods",   "age",       45, 1,
"Phillip Woods",   "height",   186, 1,
"Phillip Woods",   "age",       50, 2,
"Jessica Cordero", "age",       37, 1,
"Jessica Cordero", "height",   156, 1
)
spread(people, key, value)
people %>%
spread(key, value)
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people %>%
spread(key, value)
gather(preg, pregnant, count)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
gather(preg, pregnant, count)
## separate & unite
table3
## separate & unite
table3 %>%
separate(rate, into = c("cases", "population"))
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
table3 %>%
separate(year, into = c("century", "year"), sep = 3)
table3 %>%
separate(year, into = c("century", "year"), sep = 2) # split into first two digits and else
table5
table5 %>%
unite(new, century, year)
table5 %>%
unite(new, century, year, sep = "")
?unite
table5 %>%
unite(new, century, year, sep = "", remove = F)
## Missing values
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
stocks %>%
complete(year, qtr)
treatment <- tribble(
~ person,           ~ treatment, ~response,
"Derrick Whitmore", 1,           7,
NA,                 2,           10,
NA,                 3,           9,
"Katherine Burke",  1,           4
)
treatment %>%
fill()
treatment %>%
fill(person)
head(who)
who1 <- who %>%
gather(new_sp_m014:newrel_f65, key = "key", value = "cases", na.rm = TRUE)
who1
who1 %>%
count(key)
who1
unique(who1$key)
who2 <- who1 %>%
mutate(key = stringr::str_replace("newrel", "new_rel"))
library(stringr)
who2 <- who1 %>%
mutate(key = stringr::str_replace("newrel", "new_rel"))
who2 <- who1 %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2
who3 <- who2 %>%
separate(key, c("new", "type", "sexAge"), sep = "_")
who3
who3 %>%
count(new)
who4 <- who3 %>%
select(-new, -iso3, -iso2) # unselect redundance
who5 <- who4 %>%
separate(sexAge, c("sex", "age"), sep = 1)
who5
