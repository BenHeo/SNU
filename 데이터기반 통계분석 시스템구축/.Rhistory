apply(faithful, 2, summary)
faithful
summary(faithful$eruptions)
apply(faithful, 2, summary)
#Boxplot
par(mfrow=c(1,2))
boxplot(faithful$eruptions,main='Eruptions')
boxplot(faithful$waiting,main='Waiting')
#Boxplot
par(mfrow=c(1,1))
#왜도, 첨도
xvec=seq(0.01,0.99,0.01)
par(mfrow=c(1,2))
plot(xvec,dbeta(xvec,2,5),type='l',lwd=2,xlab='',ylab='')
plot(xvec,dbeta(xvec,7,2),type='l',lwd=2,xlab='',ylab='')
#이변량
x= faithful$eruptions; y= faithful$waiting
cov(x,y)/(sd(x)*sd(y))
cor(x,y)
plot(x,y,xlab='',ylab='')
volcano
?image
library(dplyr)
# library(dplyr)
library(tidyverse)
list.files()
# list.files()
list.files("data")
# list.files()
list.files("data")
surveys <- fread("data/surveys.csv")
surveys <- read_csv("data/surveys.csv")
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/DataProcessing.R', echo=TRUE)
surveys <- read.csv("data/surveys.csv")
names(surveys)
surveys[, match(c("plot_id", "species_id", "weight"),  names(surveys)) ]
# 사실 df는 그냥 열 이름 넣으면 된다
surveys[,c("plot_id", "species_id", "weight")]
# df는 df이기 이전에 list이기 때문에 체인을 직접 불러오는 방법 가능하다
surveys[c("plot_id", "species_id", "weight")]
# year가 1995인 데이터 행만 추출
head(surveys[surveys$year == 1995,])
# year가 1995인 데이터 행만 추출
head(surveys[surveys$year == 1995])
# year가 1995인 데이터 행만 추출
head(surveys[surveys$year == 1995,])
surveys[surveys$weight<5, c("plot_id", "species_id", "weight")]
surveys[which(surveys$weight<5), c("plot_id", "species_id", "weight")]
# weight를 kg으로 하는 col 만들기
surveys_ex <- surveys # 원본 손상 x 위해서
surveys_ex$weight_kg <- surveys_ex$weight/1000
surveys_ex <- surveys_ex[!is.na(surveys_ex$weight_kg),] # na는 제
# sex로 group 하기
u = unique(surveys$sex)
length(u)
u
class(U); levels(u)
class(u); levels(u)
#sex별로 weight계산
mean(surveys$weight[surveys$sex == u[1]], na.rm = T)
mean(surveys$weight[surveys$sex == u[2]], na.rm = T)
mean(surveys$weight[surveys$sex == u[3]], na.rm = T)
sum(!is.na(surveys$weight[surveys$sex == u[1]]))
nrow(surveys)
sum(!is.na(surveys$weight[surveys$sex == u[2]]))
sum(!is.na(surveys$weight[surveys$sex == u[3]]))
sum(!is.na(surveys$weight[surveys$sex == u[1]]))
# sum(!is.na(surveys$weight[surveys$sex == u[1]])) # 몸무게가 na인 사람들을 제외한 사람의 수
# by 로 group
by(data = surveys$weight, INDICES = surveys$sex, FUN = mean, na.rm = TRUE)
# sum(!is.na(surveys$weight[surveys$sex == u[1]])) # 몸무게가 na인 사람들을 제외한 사람의 수
# by 로 group
a <- by(data = surveys$weight, INDICES = surveys$sex, FUN = mean, na.rm = TRUE)
unlist(a)
unlist(a)[3]
# by에 INDICES 일일이 써주는 건 귀찮다
aggregate(formula = weight ~ sex, data = surveys, FUN = mean, na.rm = TRUE)
aggregate(formula = weight ~ sex+species_id, data = surveys, FUN = mean, na.rm = TRUE)
# 표준편차 구하기
aggregate(formula = weight ~ sex+species_id, data = surveys, FUN = sd, na.rm = TRUE)
# aggregate 는 FUN을 하나만 하니까 여러 정보량을 동시에 구하기에 적합하지 않다
a = c(10, 5, 3, 7)
order(a)
a[order(a)]]
a[order(a)]
a[order(a, decreasing = TRUE)]
# aggregate 는 FUN을 하나만 하니까 여러 정보량을 동시에 구하기에 적합하지 않다
table(surveys$sex, surveys$plot_id)
# plot_id 오름차순으로 surveys 정렬
surveys[order(surveys$plot_id),]
#####################################################################################################################
# dplyr
surveys %>%
select(plot_id, species_id, weight) %>%
n(10)
#####################################################################################################################
# dplyr
surveys %>%
select(plot_id, species_id, weight) %>%
n() == 10
#####################################################################################################################
# dplyr
surveys %>%
select(plot_id, species_id, weight) %>%
n() = 1
#####################################################################################################################
# dplyr
surveys %>%
select(plot_id, species_id, weight) %>%
n = 10
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/DataProcessing.R', encoding = 'UTF-8', echo=TRUE)
surveys %>%
filter(year == 1995, weight > 20)
surveys %>%
filter(year == 1995, weight > 30)
surveys %>%
filter(year == 1995, weight > 40)
surveys %>%
filter(year == 1995, weight > 50)
surveys %>%
filter(year == 1995, weight > 60)
surveys %>%
filter(!is.na(weight)) %>%
filter(weight < 5) %>%
select(species_id, sex, weight) %>% head()
surveys_ex <- surveys %>%
filter(!is.na(weight)) %>%
mutate(weight_kg = weight/1000)
surveys %>%
group_by(sex) %>%
summarize(mean_weight = mean(weight, na.rm = TRUE))
# summarize를 이용하면 여러 function을 한번에 쓸 수 있다
surveys %>%
filter(!is.na(weight)) %>%
group_by(sex, species_id) %>%
summarize(mean_weight = mean(weight),
var_weight = var(weight),
min_weight = min(weight),
max_weight = max(weight)) %>%
print(n = 5)
# 갯수 세기
surveys %>%
group_by(sex) %>%
tally()
# 정렬하기
surveys %>%
arrange(month, plot_id) %>%
head()
## 내림차순은 앞에 desc 붙이기
surveys %>%
arrange(desc(month), plot_id) %>%
head()
################################################################################################################
# reshape2
library(reshape2)
# wide format & long format
# 함수에 따라 wide를 요구하기도 하고 long 을 요구하기도 한다
names(airquality)
# wide format & long format
# 함수에 따라 wide를 요구하기도 하고 long 을 요구하기도 한다
names(airquality) <- tolower(names(airquality))
melt(airquality) %>%
head(3)
head(airquality)
melt(airquality) %>%
head(300)
melt(airquality) %>%
head(3)
aql <- melt(data = airquality, id.vars= c("month","day"))
head(aql, n = 3)
aql <- melt(data = airquality, id.vars= c("month","day"),
variable.name = "climate_variable",
value.name = "climate_value") # month와 day를 기준으로 melt한다
head(aql, n = 3)
# dcast는 long format을 wide format으로
dcast(aql, month~climate_variable, fun.aggregate = mean, na.rm=TRUE, margins = TRUE) %<%
head()
# dcast는 long format을 wide format으로
dcast(aql, month~climate_variable, fun.aggregate = mean, na.rm=TRUE, margins = TRUE) %>%
head()
paste("감자로","만든","감자칩", sep='-')
paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
paste0(1:12, collapse = "-")
paste(1:4,5:8, sep = ';')
paste(1:4,5:8, sep = ';', collapse = '-')
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/TextFunction.R', encoding = 'UTF-8', echo=TRUE)
# grep 함수 # 문자열에 패턴(단어)가 포함되어 있는지를 확인하는 함수임. 패턴이 포함되어 있는 위치 반환
grep('a', 'bbbb')
grep('a', 'bbabb')
grep("pole", c("Equator", "North Pole", "South pole", "poles"))
# nchar # 문자열의 단어 개수를 계산
nchar(c("South Pole", "한글 문자열", NA))
# substr 함수 # start부터 stop라(include)까지 문자 가져와라
substr("Equator", start = 2, stop = 4)
substr("한글 문자열 추출", start = 2, stop = 4)
substring("한글 문자열 추출", first = 2)
strsplit("6-16-2011", split = "-")
strsplit(c("6-16-2011", "1-1-1-2-1-1"), split = "-")
# 특수문자 이용한 분리
strsplit("6*16*2011", split = '*')
strsplit("6*16*2011", split = '\\*')
strsplit("6*16*2011", split = '*', fixed = TRUE) # 같은 기
#### 많이 쓰는 이스케이프 문자  '\t': 탭, '\n':줄바꿈문자. '\d':숫자
list.files()
strsplit(list.files(), split = '.', fixed = T)
a = strsplit(list.files(), split = '.', fixed = T) # 파일명과 확장자가 분리되었다
a[[1]]
for (i in 1:length(a))
{
b = a[[i]]
if (length(b) == 2)
{
print(b[-1])
}
}
tmp = rep(0, length(a))
tmp
tmp = rep(0, length(a))
for (i in 1:length(a))
{
b = a[[i]]
if (length(b) == 2)
{
tmp[i] = b[-1]
}
}
table(tmp)
regexpr("감자", "맛있는 감자칩")
gsub(pattern = "감자", replacement='고구마',
x= "머리를 감자마자 감자칩을 먹었다.")
###########################################
# 정규표현식
## OR
strsplit('감자, 고구마, 양파 그리고 파이어볼', split = '(,)|(그리고)')
###########################################
# 정규표현식
## OR
strsplit('감자, 고구마, 양파 그리고 파이어볼', split = '(, )|( 그리고 )')
## 시작
grep(pattern = '^(감자)', x = '감자는 고구마를 좋아해')
grep(pattern = '^(감자)', x = '고구마는 감자를 좋아해')
grep(pattern = '^(감자)', x = '고구마는 감자를 좋아해') # 해당 패턴이 없어서 integer(0)
## 끝 : $
grep(pattern = '(좋아해)$', x = '감자는 고구마를 좋아해')
## ANY : []
gregexpr(pattern = '[아자차카]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감자)(양파)]', text = '고구마는 감자를 안 좋아해')
## 반복 : {}   {from,to} 를 이용하여 생성. 바로 앞 문자에 대한 패턴임을 주의! o{2,4} 는 문자 o가 2번에서 4번까지 반복되는 패턴
#             [a-z]{3,6} 영어 소문자가 3번에서 6번까지 반복되는 패턴 {5} 는 5번 {5,} 5번 이상 반복을 뜻함.
grep(pattern = '^ab{2,3}', x = 'ab')
gregexpr(pattern = '[(사과)(감자)(양파)]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감자)(양파)]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감자나)(양파)]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감자)(양파)]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감)(양파)]', text = '고구마는 감자를 안 좋아해')
gregexpr(pattern = '[(사과)(감자)(양파)]', text = '고구마는 감자를 안 좋아해')
## everything except : [^]
grep(pattern = '^[^(사과)(감자)(양파)]', x = '감자는 고구마를 좋아해') # ^는 시작함을 의미 [^]에서 사과,감자,양파로 시작 안 하는 것을 요구
## everything except : [^]
grep(pattern = '^[^(사과)(감자)(양파)]', x = '감자는 고구마를 좋아해') # ^는 시작함을 의미 [^]에서 사과,감자,양파로 시작 안 하는 것을 요구
## everything except : [^]
grep(pattern = '^[^(사과)(감자나)(양파)]', x = '감자는 고구마를 좋아해') # ^는 시작함을 의미 [^]에서 사과,감자,양파로 시작 안 하는 것을 요구
## everything except : [^]
grep(pattern = '^[^(사과)(감자)(양파)]', x = '감자는 고구마를 좋아해') # ^는 시작함을 의미 [^]에서 사과,감자,양파로 시작 안 하는 것을 요구
grep()
grep('[a-z]', x='abra')
grep('^[a-z]', x='abra')
grep('^[a-z]', x='Abra')
grep('^[a-z]', x='0Abra')
grep('[^a-z]', x='0Abra')
# *: {0,}
# +: {1,}
# ?: {0,1}
# .: 어떠한 문자라도 1개
grep(pattern = '^a+', x = 'ab')
grep(pattern = '^a*', x = 'ab')
library(tidyverse)
list.files('data')
white <- read_csv('data/winequality-white.csv')
white <- read.csv('data/winequality-white.csv')
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/WhiteWine.R', echo=TRUE)
names(white)
white <- read.csv('data/winequality-white.csv', sep = ';')
names(white)
names(white) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free.sulfur_dioxide",
"total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol" )
names(white)
names(white) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide",
"total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol" )
names(white) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide",
"total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality" )
names(white)
for (i in 1:6)
{
print(i)
ks = 0:i
k = len(ks)
p = (1/2)^i
print(k*p*(1/6))
}
for (i in 1:6)
{
print(i)
ks = 0:i
k = length(ks)
p = (1/2)^i
print(k*p*(1/6))
}
21/128
5/16
for (i in 1:6)
{
print(i)
ks = 0:i
k = length(ks)
js = 0
for (j in ks)
{
js = js + choose(i, j)
}
p = (1/2)^i
print(js*p*(1/6))
}
print(ks)
for (i in 1:6)
{
print(i)
ks = 0:i
print(ks)
k = length(ks)
js = 0
for (j in ks)
{
js = js + choose(i, j)
}
p = (1/2)^i
print(js*p*(1/6))
}
for (i in 1:6)
{
print(i)
ks = 0:i
print(ks)
k = length(ks)
js = 0
for (j in ks)
{
js = js + choose(i, j)
}
print(js)
p = (1/2)^i
print(js*p*(1/6))
}
for (k in 0:6)
{
print(k)
N = k:6
prob = (1/2)^N
c = choose(N, k)
print((prob*c)/6)
}
for (k in 0:6)
{
print(k)
N = k:6
prob = (1/2)^N
c = choose(N, k)
S = sum(prob*c)
print(s/6)
}
for (k in 0:6)
{
print(k)
N = k:6
prob = (1/2)^N
c = choose(N, k)
S = sum(prob*c)
print(S/6)
}
x = rep(0, 6)
x
x = rep(0, 7)
for (k in 0:6)
{
print(k)
N = k:6
prob = (1/2)^N
c = choose(N, k)
S = sum(prob*c)
print(S/6)
x[k] = S/6
}
x
sum(x)
x = rep(0, 7)
for (k in 0:6)
{
print(k)
N = k:6
prob = (1/2)^N
print(prob)
c = choose(N, k)
print(c)
S = sum(prob*c)
print(S/6)
x[k] = S/6
}
head(white)
plot('alcohol', 'quality', white)
attach(white)
plot(fixed_acidity~quality)
boxplot(fixed_acidity~quality)
unique(quality)
boxplot(fixed_acidity~quality, col = 3:9)
ncol()
ncol(white)
boxplot(volatile_acidity~quality, col = 3:9)
boxplot(citric_acid~quality, col = 3:9)
boxplot(residual_sugar~quality, col = 3:9)
boxplot(chlorides~quality, col = 3:9)
boxplot(free_sulfur_dioxide~quality, col = 3:9)
boxplot(total_sulfur_dioxide~quality, col = 3:9)
boxplot(density~quality, col = 3:9)
boxplot(pH~quality, col = 3:9)
boxplot(sulphates~quality, col = 3:9)
boxplot(alcohol~quality, col = 3:9)
# stringr
library(stringr)
hw <- "Hadley Wickham"
str_sub(hw, 1, 6)
strsplit(hw)
strsplit(hw, ' ')
strsplit(hw, ' ')[[1]][2]
str_sub(hw, 1, 6)
str_sub(hw, -5)
str_sub(hw, -5, -2)
str_split(fruits, " and ")
fruits <- c("apples and oranges and pears and bananas",
"pineapples and mangos and guavas")
str_split(fruits, " and ")
str_split(fruits, " and ", n = 2)
str_split_fixed(fruits, " and ", 4)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "^a")
r_file <- c("Rscript.exe", "R.exe", "Rcmd.exe")
str_detect(r_file, "^R[A-Za-z0-9]*(\\.exe)$")
str_count(fruit, c("a", "b", "p", "p"))
str_count("pppppppp", "p(2,3)")
str_count("pppppppp", "p(1,)")
str_count("pppppppp", "p")
str_count("ppppppppa", "pa(1,2)")
str_count("ppppppppa", "pa{1,2}")
str_count("pppppppp", "p{1,2}")
source('C:/Users/renz/Desktop/SNU/데이터기반 통계분석 시스템구축/TextFunction.R', encoding = 'UTF-8', echo=TRUE)
str_extract_all(shopping_list, "\\d")
shopping_list <- c("apples x4", "flour", "sugar", "milk x222")
str_extract(shopping_list, "\\d") # 결과값 "4" NA  NA  "2"
str_extract_all(shopping_list, "\\d")
shopping_list <- c("apples x4", "flour", "sugar", "milk x2")
str_extract(shopping_list, "\\d") # 결과값 "4" NA  NA  "2"
str_extract_all(shopping_list, "\\d")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou]", "-")
str_replace(fruits, "[aeiou ]", "-")
str_replace_all(fruits, "[aeiou]", "-")
str_replace_all(fruits, "[aeiou ]", "-")
str_replace(fruits, "[aeiou ]", "-")
summary(white)
library(tidyverse)
white <- read.csv('data/winequality-white.csv', sep = ';')
names(white) <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide",
"total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality" )
summary(white)
head(white)
summary(white)
str(white)
attach(white)
boxplot(fixed_acidity~quality, col = 3:9)
boxplot(volatile_acidity~quality, col = 3:9)
boxplot(citric_acid~quality, col = 3:9)
boxplot(residual_sugar~quality, col = 3:9)
boxplot(chlorides~quality, col = 3:9)
boxplot(free_sulfur_dioxide~quality, col = 3:9)
boxplot(total_sulfur_dioxide~quality, col = 3:9)
boxplot(density~quality, col = 3:9)
boxplot(pH~quality, col = 3:9)
boxplot(sulphates~quality, col = 3:9)
boxplot(alcohol~quality, col = 3:9)
library(tidyverse)
library(httr)
?readLines
?file
# connection 만들기
url("http://ranking.uos.ac.kr")
# connection 만들기
con <- url("http://ranking.uos.ac.kr")
readLines(con)
close(con)
a <- readLines(con)
str(a)
# connection 만들기
con <- url("http://ranking.uos.ac.kr")
a <- readLines(con)
close(con)
str(a)
a[10:20]
ncol(a)
type(a)
typeof(a)
4/22
1-4/22
