install.packages("arules")
# Practice 1
# (1) data check
tot=read.csv("tot.csv", header = TRUE) #for 37284 ppl, 387 products
# need to load 'ref_data_ver2' file
load("ref_data_ver2.RData")
tot=tot[,-1]
colnames(tot)=unq.itm
rownames(tot)=unq.usr
head(tot)
library(arules)
colnames(tot)=unq.itm.name
rules=apriori(as.matrix(tot), parameter=list(supp=0.01, conf=0.5))
rules
#minlen=최소물품수(lhs+rhs), maxlen=최대물품수(lhs+rhs), smax=최대 지지도
print(rules)
rules.sorted=sort(rules, by="lift")
inspect(rules.sorted) #inspect()함수로 규칙을 살펴볼수있음
?%pin%
?subset
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %pin% c("크림"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
# pin = partial in
inspect(rules.sub)
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %ain% c("크림"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %oin% c("크림"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %in% c("크림"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %pin% c("크림"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
# pin = partial in
inspect(rules.sub)
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %pin% c("유아동"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
# pin = partial matching
inspect(rules.sub)
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %in% c("유아동"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
# pin = partial matching
inspect(rules.sub)
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %ain% c("유아동"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %oin% c("유아동"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
#관심있는 단어(크림)가 포함된 연관규칙 => subset
rules.sub = subset(rules, rhs %pin% c("유아동"))  #관심있는 item 찾을때는 in, ain을 사용할수있음
# pin = partial matching
inspect(rules.sub)
# Practice 2: 직접 해보세요!!
shopping=read.csv("shopping.csv", header = TRUE) #for 10000 ppl, 70 products
image(shopping)
shopping
colnames(shoppping) <- c("customer", "goods", "times")
colnames(shopping) <- c("customer", "goods", "times")
i <- shopping$customer
j <- shopping$goods
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)), x=1)
image(shopping.m)
?image
image(shopping.m, xlab = "Items(Columns)", ylab = "Transactions(Rows)")
shopping.m
# Practice 2: 직접 해보세요!!
shopping=read.csv("shopping.csv", header = TRUE) #for 10000 ppl, 70 products
head(shopping)
max(shopping$횟수)
colnames(shopping) <- c("customer", "goods", "times")
i <- shopping$times
j <- shopping$goods
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)), x=1)
library(arules)
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)), x=1)
image(shopping.m, xlab = "Items(Columns)", ylab = "Transactions(Rows)")
i <- shopping$customer
j <- shopping$goods
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)), x=1)
image(shopping.m, xlab = "Items(Columns)", ylab = "Transactions(Rows)")
shopping.m
?image
?sparseMatrix
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)))
shopping.m
image(shopping.m, xlab = "Items(Columns)", ylab = "Transactions(Rows)")
image(shopping.m[1:70,], xlab = "Items(Columns)", ylab = "Transactions(Rows)")
image(shopping.m[1:100,], xlab = "Items(Columns)", ylab = "Transactions(Rows)")
source('C:/Users/renz/Desktop/SNU/고급 빅데이터 분석 기법/association_rule/2_association_code.R', encoding = 'UTF-8', echo=TRUE)
# Practice 1
# (1) data check
tot=read.csv("tot.csv", header = TRUE) #for 37284 ppl, 387 products
tot
# need to load 'ref_data_ver2' file
load("ref_data_ver2.RData")
class(tot)
typeof(tot)
tot=tot[,-1]
colnames(tot)=unq.itm
rownames(tot)=unq.usr
head(tot)
# (2)
#model fitting
library(arules)
colnames(tot)=unq.itm.name
rules=apriori(as.matrix(tot), parameter=list(supp=0.01, conf=0.5))
#minlen=최소물품수(lhs+rhs), maxlen=최대물품수(lhs+rhs), smax=최대 지지도
print(rules)
rules.sorted=sort(rules, by="lift")
inspect(rules.sorted) #inspect()함수로 규칙을 살펴볼수있음
# Practice 2: 직접 해보세요!!
shopping=read.csv("shopping.csv", header = TRUE) #for 10000 ppl, 70 products
colnames(shopping) <- c("customer", "goods", "times")
shopping
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)))
i <- shopping$customer
j <- shopping$goods
shopping.m <- sparseMatrix(i,j, dims = c(max(i), max(j)))
shopping.m
image(shopping.m[1:100,], xlab = "Items(Columns)", ylab = "Transactions(Rows)")
library(arules)
# Practice 2: 직접 해보세요!!
shopping=read.csv("shopping.csv", header = TRUE) #for 10000 ppl, 70 products
colnames(shopping) <- c("customer", "goods", "times")
i <- shopping$customer
j <- shopping$goods
max(j)
j
