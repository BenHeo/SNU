## Cereals data
cereals = read.csv("cereals.csv",header=T)
names(cereals)
summary(cereals)
dim(cereals)
cereals = cereals[, c("name","calories","protein","fat","sodium","fiber","carbo","sugars","potass","vitamins")]
dim(cereals)
## missing value가 있는 자료는 삭제
cereals[!complete.cases(cereals),] #na.omit(cereals)
cereals = cereals[complete.cases(cereals),]
dim(cereals)
length(which(is.na(cereals)))
rownames(cereals) = cereals[,"name"] # 이름에 해당되는 변수가 있었는데 이것을 변수에서 빼고 rowname으로
cereals = cereals[,-1]
head(cereals,6)
## 산포도 확인
plot(cereals)
?dist
#k1=3
dist.E =dist(cereals) # use "method= "
cluster.EC = hclust(dist.E)
cluster.EC
dist.E
plot(cluster.EC, main="Euclidean, complete", cex=1)
cluster.ES = hclust(dist.E, method="single")
plot(cluster.ES, main="Euclidean, single")
cluster.EA = hclust(dist.E, method="average")
plot(cluster.EA, main="Euclidean, average")
?hclust
## 군집 분할(할당)
clusters = cutree(cluster.EC, k=2:6) #군집 수 조절
head(clusters)
clusters = cutree(cluster.EC, h=100) #덴드로그램의 높이 조절
clusters[1:10]
# 덴드로그램에서 할당
plot(cluster.EC, main="Euclidean, complete")
groups = cutree(cluster.EC, h=100)
head(groups,20)
rect.hclust(cluster.EC, h=100, border="red")
plot(cluster.EC, main="Euclidean, complete")
groups = cutree(cluster.EC, k=4)
head(groups,20)
rect.hclust(cluster.EC, k=4, border="red") # draw denrogram with red borders around the k1 clusters
for (i in 1:4){
cat(i,'- th cluster \n')
tmp = rbind(round(colMeans(cereals[which(groups==i),]), 3),
round(diag(cov(cereals[which(groups==i),])), 3)); rownames(tmp) = c("Mean","Var")
print(tmp)
}
table(groups)
i=1
cov(cereals[which(groups==i),]
)
var(cereals[which(groups==i),])
Clu.Ave = cutree(cluster.EA, k=4)
Clu.Sig = cutree(cluster.ES, k=4)
Clu.Com = cutree(cluster.EC, k=4)
table(Clu.Ave, Clu.Sig)
table(Clu.Ave, Clu.Com)
table(Clu.Sig, Clu.Com)
# K-means 결과
library(cluster)
cluster.K4 = kmeans(cereals, centers=4)
cluster.K4
plot(cereals, col=cluster.K4$cluster) #k-means
## 군집 수 K 정하기
wss <- vector(length=15)
for (i in 1:15) wss[i] = kmeans(cereals,centers=i, nstart = 10)$tot.withinss
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main = "Total within SS for varying K")
cmds = cmdscale(dist.E, k = 2)
head(cmds)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8)
cmds = cmdscale(dist.E, k = 2, eig = TRUE)
head(cmds)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
cmds = cmdscale(dist.E, k = 2)
head(cmds)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8)
#--- 다차원 척도법을 이용한 군집분석 시각화(p.81)
k1 = 4
groups = cutree(cluster.EC, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.ES, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
groups = cutree(cluster.EA, k=k1)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=groups)
plot(cmds, xlab = "coord 1", ylab = "coord 2", main = "MDS", type = "n")
text(cmds, labels = rownames(cmds), cex=.8, col=cluster.K4$cluster)
#--- PCA 를 이용한 군집분석 시각화(p.78)
# PCA : 차원 축소 방법중 하나. 자료의 분산을 고유값 분해
pca <- princomp(cereals, cor=T)
pca
groups = cutree(cluster.EC, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
groups = cutree(cluster.ES, k=k1)
plot(pca$scores[,1:2], xlab = "coord 1", ylab = "coord 2", main = "PCA", type = "n")
text(pca$scores[,1:2], labels = rownames(pca$scores), cex=.8, col=groups)
pca$sdev
