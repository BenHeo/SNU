library(tidyr)
library(dplyr)
#install.packages("OpenMx")
library(OpenMx)
data(twinData)
twinData <- as_tibble(twinData)
help(twinData)
install.packages("OpenMx")
#install.packages("OpenMx")
library(OpenMx)
data(twinData)
twinData <- as_tibble(twinData)
help(twinData)
twinData
table(twinData$zygosity)
#scatter plot
library(ggplot2)
twinData %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point()
twinData %>% ggplot(mapping = aes(ht1, ht2)) +
geom_point()
#check correlation
cor(twinData$ht1, twinData$ht2, use="complete.obs")
#test whether two variables are correlated
twinData %>%
with(cor.test(~ ht1 + ht2, alternative = "greater"))
source('C:/Users/renz/Desktop/SNU/자료기반 통계의사결정모델/Week3/Lab3-1/lab3-1_code.R', echo=TRUE)
#test whether two variables are correlated
twinData %>%
with(cor.test(~ ht1 + ht2, alternative = "greater"))
?cor.test
#test whether two variables are correlated
twinData %>%
with(cor.test(~ ht1 + ht2, alternative = "greater", conf.level=0.99))
#test for each subgroup
twinData %>%
group_by(cohort,zygosity) %>%
summarize(cor.test(~ ht1 + ht2, data = .))
library(broom)
cor_result <- cor.test(~ ht1 + ht2, data = twinData)
cor_result
tidy_cor_result <- tidy(cor_result)
tidy_cor_result
str(cor_result) #list
str(tidy_cor_result) #data frame
# summarize() must be of the form "var=value"
twinData %>%
group_by(cohort,zygosity) %>%
summarize(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
# do() returns either a data frame or arbitrary objects
twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
library(tidyr)
library(dplyr)
library(ggplot2)
#install.packages("mosaicData")
library(mosaicData)
# RailTrail data
data(RailTrail)
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume))
# A simple linear regression is fitted:
mod1 <- lm(volume ~ hightemp, data = RailTrail)
summary(mod1)
abline(mod1)
blines(mod1)
lines(mod1)
?ggplot
# generating an evenly spaced grid of values that covers the region where our data lies
#install.packages("modelr")
library(modelr)
grid <- RailTrail %>%
data_grid(hightemp)
grid
grid <- grid %>%
add_predictions(mod1)
grid
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) + geom_line(aes(y = volume))
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) + geom_abline(aes(y = volume))
?geom_abline
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) + geom_abline(slope = mod1$coefficients[1], intercept = mod1$coefficients[2])
summary(mod1)
mod1$coefficients[1]
# hightemp vs. volume
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) + geom_abline(slope = mod1$coefficients[2], intercept = mod1$coefficients[1])
#--- Visualize predictions
ggplot(RailTrail, aes(hightemp)) +
geom_point(aes(y = volume)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
#--- Visualize residuals
# residuals with the original dataset
RailTrail_r <- RailTrail %>%
add_residuals(mod1) %>% dplyr::select(hightemp, volume, resid)
head(RailTrail_r)
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
?geom_ref_line
# 참고 : Polynomial regression (2차 다항회귀)
mod2 <- lm(volume ~ hightemp + I(hightemp^2), data=RailTrail)
summary(mod2)
RailTrail_r2 <- RailTrail %>%
add_predictions(mod2) %>%
add_residuals(mod2) %>%
dplyr::select(hightemp, volume, pred, resid)
head(RailTrail_r2)
ggplot(RailTrail_r2, aes(hightemp, volume)) +
geom_point() +
geom_line(aes(y=pred), colour = "red", size=1)
ggplot(RailTrail_r2, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
ggplot(RailTrail_r, aes(hightemp, resid)) +
geom_ref_line(h = 0) + # reference line
geom_point()
ggplot(RailTrail_r2, aes(hightemp, resid)) +
geom_ref_line(h = 0) +
geom_point()
ggplot(RailTrail_r2, aes(hightemp, volume)) +
geom_point() +
geom_line(aes(y=pred), colour = "red", size=1)
# mtcars data set
head(mtcars)
# multiple linear regression model
mod <- lm(mpg ~ ., data = mtcars)
summary(mod)
# To predict, use broom::augment() function
library(broom)
library(dplyr)
library(tidyr)
augment(mod, mtcars) %>% select(.rownames, mpg, .fitted) %>% head()
#--- List-columns
library(tibble)
al <- augment(mod, mtcars) %>% select(.rownames, mpg, .fitted) %>% head()
al %>% summarise(SSE = sum((mpg-.fitted)^2))
al <- augment(mod, mtcars) %>% select(.rownames, mpg, .fitted)
al %>% summarise(SSE = sum((mpg-.fitted)^2))
# an example of a list-column data set
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl
# an example of a list-column data set
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:15, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl
# an example of a list-column data set
temp_tbl <- tribble(
~x, ~y,
1:3, "1, 2",
3:5, "3, 4, 5"
)# tribble will create a list column if the value in any cell is not a scalar
temp_tbl
#why would you need to list-column? multivalues summariries
quantile(mtcars$mpg)
temp_tbl$x[1]
#why would you need to list-column? multivalues summariries
quantile(mtcars$mpg)
# summarize() expects a single value
mtcars %>%
group_by(cyl) %>%
summarize(q = quantile(mpg))
# wrap the result in a list.
mtcars %>%
group_by(cyl) %>%
summarise(q = list(quantile(mpg)))
probs <- c(0.01, 0.25, 0.5, 0.75, 0.99)
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs))) %>%
unnest()
probs <- c(0.01, 0.25, 0.5, 0.75, 0.99)
mtcars %>%
group_by(cyl) %>%
summarize(p = list(probs), q = list(quantile(mpg, probs)))
#--- Creating folds
library(modelr)
#generate 5 folds using modelr::crossv_kfold()
set.seed(1)
folds <- crossv_kfold(mtcars, k = 5)
folds
# row number of test set in first partition
folds$test[[1]]
# row number of test set in first partition
folds$train[[1]]
library(dplyr)
library(purrr)
folds <- folds %>% mutate(model = map(train, ~ lm(mpg ~ ., data = .)))
folds
folds$model[1]
ggplot(twinData, aes(order, height)) + facet_grid(cohort, zygosity)
?facet_grid
ggplot(twinData, aes(order, height)) + facet_grid(cohort~zygosity)
twinData
help(twinData)
#######################
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity)
# summarize() must be of the form "var=value"
twinData %>%
group_by(cohort,zygosity) %>%
summarize(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
# summarize() must be of the form "var=value"
twinData %>%
group_by(cohort,zygosity) %>%
summarize(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
# do() returns either a data frame or arbitrary objects
twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )
)
tidy_cor_result
#test whether two variables are correlated
twinData %>%
with(cor.test(~ ht1 + ht2, alternative = "greater"))
#test for each subgroup
twinData %>%
group_by(cohort,zygosity) %>%
summarize(cor.test(~ ht1 + ht2, data = .))
# do() returns either a data frame or arbitrary objects
twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
#install.packages("OpenMx")
library(OpenMx)
cor.test(~ ht1 + ht2, alternative = "greater")
cor.test(data = twinData,~ ht1 + ht2, alternative = "greater")
# do() returns either a data frame or arbitrary objects
twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
#######################
BetwinData <- twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
BetwinData %>%
ggplot(aes(ht1, ht2)) + geom_point(aes(color = conf.low)) + facet_grid(cohort~zygosity)
#######################
BetwinData <- twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ ht1 + ht2, alternative = "greater" , data = . )))
BetwinData
?facet_grid
BetwinData
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point(aes(color = conf.low)) + facet_grid(cohort~zygosity, cols = "skyblue")
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity, cols = "skyblue")
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity)
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity, cols = "blue")
twinData %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity, cols = BetwinData$conf.low)
twinData
twinData %>%
inner_join(BetwinData, by = c(cohort, zygosity))
?inner_join
twinData %>%
inner_join(BetwinData, by = c("cohort", "zygosity"))
twinData %>%
inner_join(BetwinData, by = c("cohort", "zygosity"))
twinData %>%
inner_join(BetwinData, by = c("cohort", "zygosity")) %>%
ggplot(aes(ht1, ht2)) + geom_point() + facet_grid(cohort~zygosity)
twinData %>%
inner_join(BetwinData, by = c("cohort", "zygosity")) %>%
ggplot(aes(ht1, ht2, color = conf.low)) + geom_point() + facet_grid(cohort~zygosity)
twinData %>%
inner_join(BetwinData, by = c("cohort", "zygosity")) %>%
ggplot(aes(wt1, wt2, color = conf.low)) + geom_point() + facet_grid(cohort~zygosity)
w_twinData <- twinData %>%
group_by(cohort,zygosity) %>%
do(tidy( cor.test(~ wt1 + wt2, alternative = "greater" , data = . )))
twinData %>%
inner_join(w_twinData, by = c("cohort", "zygosity")) %>%
ggplot(aes(wt1, wt2, color = conf.low)) + geom_point() + facet_grid(cohort~zygosity)
w_twinData
library(ISLR)
set.seed(2)
x=matrix(rnorm(50*2), ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
plot(x)
km.out <- kmeans(x, 2, nstart = 20)
plot(x, col=(km.out$cluster+1),main="K-Means Clustering Results with K=2", xlab="", ylab="", pch=20, cex=2)
km.out
set.seed(3)
km <- vector()
for (i in 1:10){
km.out <- kmeans(x, i, nstart = 10)
km[i] <- km.out$tot.withinss
}
km
plot(km, type = 'l')
points(km, col = "red", cex = 1.5)
library(datasets)
library(tidyverse)
ggplot(iris, aes(Petal.Length, Petal.Width)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point(size = 2)
head(iris)
irisCluster <- kmeans(iris[,c(3,4)], 3)
irisCluster <- kmeans(iris[,c(3,4)], 3, nstart = 20)
irisCluster
irisCluster$cluster
table(iris$Species, irisCluster$cluster)
head(iris)
x = iris[,c(3,4)]
hc.complete <- hclust(dist(x), "complete")
dist(x)
hc.complete <- hclust(dist(x), "complete") # dist is essential
hc.single <- hclust(dist(x), "single") # dist is essential
hc.average <- hclust(dist(x), "average") # dist is essential
plot(hc.complete, main = "Complete Clustering", xlab = "", ylab = "", cex = 0.9)
plot(hc.average, main = "Average Clustering", xlab = "", ylab = "", cex = 0.9)
plot(hc.single, main = "Single Clustering", xlab = "", ylab = "", cex = 0.9)
cutree(hc.complete, 2)
cutree(hc.complete, 3)
hcc_iris <- cutree(hc.complete, 3)
table(iris$Species, hcc_iris)
hcc_iris <- cutree(hc.average, 3)
table(iris$Species, hcc_iris)
hcc_iris <- cutree(hc.single, 3)
table(iris$Species, hcc_iris)
load("data/AlzheimerDisease/AlzheimerDisease.RData")
getwd()
